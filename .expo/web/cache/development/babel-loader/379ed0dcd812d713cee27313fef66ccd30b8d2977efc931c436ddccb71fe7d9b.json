{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport * as SQLite from 'expo-sqlite';\nvar db = SQLite.openDatabase('smartlist.db');\nexport var initializeDatabase = function () {\n  var _ref = _asyncToGenerator(function* () {\n    return new Promise(function (resolve, reject) {\n      try {\n        db.transaction(function (tx) {\n          tx.executeSql(`CREATE TABLE IF NOT EXISTS users (\n            id TEXT PRIMARY KEY,\n            email TEXT NOT NULL,\n            display_name TEXT,\n            photo_url TEXT,\n            last_login INTEGER,\n            preferences TEXT\n          )`, [], function () {\n            return console.log('Tabela de usuários criada com sucesso');\n          }, function (_, error) {\n            return console.error('Erro ao criar tabela de usuários:', error);\n          });\n          tx.executeSql(`CREATE TABLE IF NOT EXISTS products (\n            id TEXT PRIMARY KEY,\n            barcode TEXT,\n            name TEXT NOT NULL,\n            description TEXT,\n            category TEXT,\n            image_url TEXT,\n            created_at INTEGER,\n            updated_at INTEGER,\n            is_synced INTEGER DEFAULT 0,\n            is_deleted INTEGER DEFAULT 0,\n            user_id TEXT\n          )`, [], function () {\n            return console.log('Tabela de produtos criada com sucesso');\n          }, function (_, error) {\n            return console.error('Erro ao criar tabela de produtos:', error);\n          });\n          tx.executeSql(`CREATE TABLE IF NOT EXISTS prices (\n            id TEXT PRIMARY KEY,\n            product_id TEXT NOT NULL,\n            store_id TEXT,\n            price REAL NOT NULL,\n            date INTEGER,\n            is_synced INTEGER DEFAULT 0,\n            is_deleted INTEGER DEFAULT 0,\n            FOREIGN KEY (product_id) REFERENCES products (id) ON DELETE CASCADE\n          )`, [], function () {\n            return console.log('Tabela de preços criada com sucesso');\n          }, function (_, error) {\n            return console.error('Erro ao criar tabela de preços:', error);\n          });\n          tx.executeSql(`CREATE TABLE IF NOT EXISTS stores (\n            id TEXT PRIMARY KEY,\n            name TEXT NOT NULL,\n            address TEXT,\n            latitude REAL,\n            longitude REAL,\n            created_at INTEGER,\n            updated_at INTEGER,\n            is_synced INTEGER DEFAULT 0,\n            is_deleted INTEGER DEFAULT 0\n          )`, [], function () {\n            return console.log('Tabela de lojas criada com sucesso');\n          }, function (_, error) {\n            return console.error('Erro ao criar tabela de lojas:', error);\n          });\n          tx.executeSql(`CREATE TABLE IF NOT EXISTS budgets (\n            id TEXT PRIMARY KEY,\n            name TEXT NOT NULL,\n            amount REAL NOT NULL,\n            start_date INTEGER,\n            end_date INTEGER,\n            category TEXT,\n            created_at INTEGER,\n            updated_at INTEGER,\n            is_synced INTEGER DEFAULT 0,\n            is_deleted INTEGER DEFAULT 0,\n            user_id TEXT\n          )`, [], function () {\n            return console.log('Tabela de orçamentos criada com sucesso');\n          }, function (_, error) {\n            return console.error('Erro ao criar tabela de orçamentos:', error);\n          });\n          tx.executeSql(`CREATE TABLE IF NOT EXISTS settings (\n            id TEXT PRIMARY KEY,\n            key TEXT NOT NULL,\n            value TEXT,\n            user_id TEXT\n          )`, [], function () {\n            console.log('Tabela de configurações criada com sucesso');\n            resolve({\n              success: true\n            });\n          }, function (_, error) {\n            console.error('Erro ao criar tabela de configurações:', error);\n            reject({\n              success: false,\n              error: error\n            });\n          });\n        });\n      } catch (error) {\n        console.error('Erro ao inicializar banco de dados:', error);\n        reject({\n          success: false,\n          error: error\n        });\n      }\n    });\n  });\n  return function initializeDatabase() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var executeQuery = function executeQuery(query) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(query, params, function (_, result) {\n        return resolve(result);\n      }, function (_, error) {\n        return reject(error);\n      });\n    });\n  });\n};\nexport var clearDatabase = function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    var tables = ['users', 'products', 'prices', 'lists', 'list_items', 'stores', 'budgets', 'settings'];\n    try {\n      for (var table of tables) {\n        yield executeQuery(`DELETE FROM ${table}`);\n      }\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Erro ao limpar banco de dados:', error);\n      return {\n        success: false,\n        error: error\n      };\n    }\n  });\n  return function clearDatabase() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport default db;","map":{"version":3,"names":["SQLite","db","openDatabase","initializeDatabase","_ref","_asyncToGenerator","Promise","resolve","reject","transaction","tx","executeSql","console","log","_","error","success","apply","arguments","executeQuery","query","params","length","undefined","result","clearDatabase","_ref2","tables","table"],"sources":["C:/Users/rilto/Downloads/meusProjetos/smartList/src/app/services/database.js"],"sourcesContent":["import * as SQLite from 'expo-sqlite';\r\n\r\n// Abrir conexão com o banco de dados\r\nconst db = SQLite.openDatabase('smartlist.db');\r\n\r\n/**\r\n * Inicializa o banco de dados local criando as tabelas necessárias\r\n */\r\nexport const initializeDatabase = async () => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      db.transaction(tx => {\r\n        // Tabela de usuários\r\n        tx.executeSql(\r\n          `CREATE TABLE IF NOT EXISTS users (\r\n            id TEXT PRIMARY KEY,\r\n            email TEXT NOT NULL,\r\n            display_name TEXT,\r\n            photo_url TEXT,\r\n            last_login INTEGER,\r\n            preferences TEXT\r\n          )`,\r\n          [],\r\n          () => console.log('Tabela de usuários criada com sucesso'),\r\n          (_, error) => console.error('Erro ao criar tabela de usuários:', error)\r\n        );\r\n\r\n        // Tabela de produtos\r\n        tx.executeSql(\r\n          `CREATE TABLE IF NOT EXISTS products (\r\n            id TEXT PRIMARY KEY,\r\n            barcode TEXT,\r\n            name TEXT NOT NULL,\r\n            description TEXT,\r\n            category TEXT,\r\n            image_url TEXT,\r\n            created_at INTEGER,\r\n            updated_at INTEGER,\r\n            is_synced INTEGER DEFAULT 0,\r\n            is_deleted INTEGER DEFAULT 0,\r\n            user_id TEXT\r\n          )`,\r\n          [],\r\n          () => console.log('Tabela de produtos criada com sucesso'),\r\n          (_, error) => console.error('Erro ao criar tabela de produtos:', error)\r\n        );\r\n\r\n        // Tabela de preços\r\n        tx.executeSql(\r\n          `CREATE TABLE IF NOT EXISTS prices (\r\n            id TEXT PRIMARY KEY,\r\n            product_id TEXT NOT NULL,\r\n            store_id TEXT,\r\n            price REAL NOT NULL,\r\n            date INTEGER,\r\n            is_synced INTEGER DEFAULT 0,\r\n            is_deleted INTEGER DEFAULT 0,\r\n            FOREIGN KEY (product_id) REFERENCES products (id) ON DELETE CASCADE\r\n          )`,\r\n          [],\r\n          () => console.log('Tabela de preços criada com sucesso'),\r\n          (_, error) => console.error('Erro ao criar tabela de preços:', error)\r\n        );\r\n\r\n        // Tabela de lojas/mercados\r\n        tx.executeSql(\r\n          `CREATE TABLE IF NOT EXISTS stores (\r\n            id TEXT PRIMARY KEY,\r\n            name TEXT NOT NULL,\r\n            address TEXT,\r\n            latitude REAL,\r\n            longitude REAL,\r\n            created_at INTEGER,\r\n            updated_at INTEGER,\r\n            is_synced INTEGER DEFAULT 0,\r\n            is_deleted INTEGER DEFAULT 0\r\n          )`,\r\n          [],\r\n          () => console.log('Tabela de lojas criada com sucesso'),\r\n          (_, error) => console.error('Erro ao criar tabela de lojas:', error)\r\n        );\r\n\r\n        // Tabela de orçamentos\r\n        tx.executeSql(\r\n          `CREATE TABLE IF NOT EXISTS budgets (\r\n            id TEXT PRIMARY KEY,\r\n            name TEXT NOT NULL,\r\n            amount REAL NOT NULL,\r\n            start_date INTEGER,\r\n            end_date INTEGER,\r\n            category TEXT,\r\n            created_at INTEGER,\r\n            updated_at INTEGER,\r\n            is_synced INTEGER DEFAULT 0,\r\n            is_deleted INTEGER DEFAULT 0,\r\n            user_id TEXT\r\n          )`,\r\n          [],\r\n          () => console.log('Tabela de orçamentos criada com sucesso'),\r\n          (_, error) => console.error('Erro ao criar tabela de orçamentos:', error)\r\n        );\r\n\r\n        // Tabela de configurações\r\n        tx.executeSql(\r\n          `CREATE TABLE IF NOT EXISTS settings (\r\n            id TEXT PRIMARY KEY,\r\n            key TEXT NOT NULL,\r\n            value TEXT,\r\n            user_id TEXT\r\n          )`,\r\n          [],\r\n          () => {\r\n            console.log('Tabela de configurações criada com sucesso');\r\n            resolve({ success: true });\r\n          },\r\n          (_, error) => {\r\n            console.error('Erro ao criar tabela de configurações:', error);\r\n            reject({ success: false, error });\r\n          }\r\n        );\r\n      });\r\n    } catch (error) {\r\n      console.error('Erro ao inicializar banco de dados:', error);\r\n      reject({ success: false, error });\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Executa uma consulta SQL no banco de dados local\r\n * @param {string} query - Consulta SQL a ser executada\r\n * @param {Array} params - Parâmetros para a consulta\r\n */\r\nexport const executeQuery = (query, params = []) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction(tx => {\r\n      tx.executeSql(\r\n        query,\r\n        params,\r\n        (_, result) => resolve(result),\r\n        (_, error) => reject(error)\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * Limpa o banco de dados local (útil para logout ou reset)\r\n */\r\nexport const clearDatabase = async () => {\r\n  const tables = [\r\n    'users',\r\n    'products',\r\n    'prices',\r\n    'lists',\r\n    'list_items',\r\n    'stores',\r\n    'budgets',\r\n    'settings'\r\n  ];\r\n\r\n  try {\r\n    for (const table of tables) {\r\n      await executeQuery(`DELETE FROM ${table}`);\r\n    }\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('Erro ao limpar banco de dados:', error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n\r\nexport default db;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}