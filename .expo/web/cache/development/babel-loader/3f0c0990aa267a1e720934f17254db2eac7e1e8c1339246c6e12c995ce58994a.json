{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\nimport ExpoLocalAuthentication from \"./ExpoLocalAuthentication\";\nimport { AuthenticationType, SecurityLevel } from \"./LocalAuthentication.types\";\nexport { AuthenticationType, SecurityLevel };\nexport function hasHardwareAsync() {\n  return _hasHardwareAsync.apply(this, arguments);\n}\nfunction _hasHardwareAsync() {\n  _hasHardwareAsync = _asyncToGenerator(function* () {\n    if (!ExpoLocalAuthentication.hasHardwareAsync) {\n      throw new UnavailabilityError('expo-local-authentication', 'hasHardwareAsync');\n    }\n    return yield ExpoLocalAuthentication.hasHardwareAsync();\n  });\n  return _hasHardwareAsync.apply(this, arguments);\n}\nexport function supportedAuthenticationTypesAsync() {\n  return _supportedAuthenticationTypesAsync.apply(this, arguments);\n}\nfunction _supportedAuthenticationTypesAsync() {\n  _supportedAuthenticationTypesAsync = _asyncToGenerator(function* () {\n    if (!ExpoLocalAuthentication.supportedAuthenticationTypesAsync) {\n      throw new UnavailabilityError('expo-local-authentication', 'supportedAuthenticationTypesAsync');\n    }\n    return yield ExpoLocalAuthentication.supportedAuthenticationTypesAsync();\n  });\n  return _supportedAuthenticationTypesAsync.apply(this, arguments);\n}\nexport function isEnrolledAsync() {\n  return _isEnrolledAsync.apply(this, arguments);\n}\nfunction _isEnrolledAsync() {\n  _isEnrolledAsync = _asyncToGenerator(function* () {\n    if (!ExpoLocalAuthentication.isEnrolledAsync) {\n      throw new UnavailabilityError('expo-local-authentication', 'isEnrolledAsync');\n    }\n    return yield ExpoLocalAuthentication.isEnrolledAsync();\n  });\n  return _isEnrolledAsync.apply(this, arguments);\n}\nexport function getEnrolledLevelAsync() {\n  return _getEnrolledLevelAsync.apply(this, arguments);\n}\nfunction _getEnrolledLevelAsync() {\n  _getEnrolledLevelAsync = _asyncToGenerator(function* () {\n    if (!ExpoLocalAuthentication.getEnrolledLevelAsync) {\n      throw new UnavailabilityError('expo-local-authentication', 'getEnrolledLevelAsync');\n    }\n    return yield ExpoLocalAuthentication.getEnrolledLevelAsync();\n  });\n  return _getEnrolledLevelAsync.apply(this, arguments);\n}\nexport function authenticateAsync() {\n  return _authenticateAsync.apply(this, arguments);\n}\nfunction _authenticateAsync() {\n  _authenticateAsync = _asyncToGenerator(function* () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!ExpoLocalAuthentication.authenticateAsync) {\n      throw new UnavailabilityError('expo-local-authentication', 'authenticateAsync');\n    }\n    if (options.hasOwnProperty('promptMessage')) {\n      invariant(typeof options.promptMessage === 'string' && options.promptMessage.length, 'LocalAuthentication.authenticateAsync : `options.promptMessage` must be a non-empty string.');\n    }\n    var promptMessage = options.promptMessage || 'Authenticate';\n    var result = yield ExpoLocalAuthentication.authenticateAsync(_objectSpread(_objectSpread({}, options), {}, {\n      promptMessage: promptMessage\n    }));\n    return result;\n  });\n  return _authenticateAsync.apply(this, arguments);\n}\nexport function cancelAuthenticate() {\n  return _cancelAuthenticate.apply(this, arguments);\n}\nfunction _cancelAuthenticate() {\n  _cancelAuthenticate = _asyncToGenerator(function* () {\n    if (!ExpoLocalAuthentication.cancelAuthenticate) {\n      throw new UnavailabilityError('expo-local-authentication', 'cancelAuthenticate');\n    }\n    yield ExpoLocalAuthentication.cancelAuthenticate();\n  });\n  return _cancelAuthenticate.apply(this, arguments);\n}","map":{"version":3,"names":["UnavailabilityError","invariant","ExpoLocalAuthentication","AuthenticationType","SecurityLevel","hasHardwareAsync","_hasHardwareAsync","apply","arguments","_asyncToGenerator","supportedAuthenticationTypesAsync","_supportedAuthenticationTypesAsync","isEnrolledAsync","_isEnrolledAsync","getEnrolledLevelAsync","_getEnrolledLevelAsync","authenticateAsync","_authenticateAsync","options","length","undefined","hasOwnProperty","promptMessage","result","_objectSpread","cancelAuthenticate","_cancelAuthenticate"],"sources":["C:\\Users\\rilto\\Downloads\\meusProjetos\\smartList\\node_modules\\expo-local-authentication\\src\\LocalAuthentication.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\n\nimport ExpoLocalAuthentication from './ExpoLocalAuthentication';\nimport {\n  LocalAuthenticationOptions,\n  AuthenticationType,\n  LocalAuthenticationResult,\n  SecurityLevel,\n} from './LocalAuthentication.types';\n\nexport { LocalAuthenticationOptions, AuthenticationType, LocalAuthenticationResult, SecurityLevel };\n\n// @needsAudit\n/**\n * Determine whether a face or fingerprint scanner is available on the device.\n * @return Returns a promise which fulfils with a `boolean` value indicating whether a face or\n * fingerprint scanner is available on this device.\n */\nexport async function hasHardwareAsync(): Promise<boolean> {\n  if (!ExpoLocalAuthentication.hasHardwareAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'hasHardwareAsync');\n  }\n  return await ExpoLocalAuthentication.hasHardwareAsync();\n}\n\n// @needsAudit\n/**\n * Determine what kinds of authentications are available on the device.\n * @return Returns a promise which fulfils to an array containing [`AuthenticationType`s](#authenticationtype).\n *\n * Devices can support multiple authentication methods- i.e. `[1,2]` means the device supports both\n * fingerprint and facial recognition. If none are supported, this method returns an empty array.\n */\nexport async function supportedAuthenticationTypesAsync(): Promise<AuthenticationType[]> {\n  if (!ExpoLocalAuthentication.supportedAuthenticationTypesAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'supportedAuthenticationTypesAsync');\n  }\n  return await ExpoLocalAuthentication.supportedAuthenticationTypesAsync();\n}\n\n// @needsAudit\n/**\n * Determine whether the device has saved fingerprints or facial data to use for authentication.\n * @return Returns a promise which fulfils to `boolean` value indicating whether the device has\n * saved fingerprints or facial data for authentication.\n */\nexport async function isEnrolledAsync(): Promise<boolean> {\n  if (!ExpoLocalAuthentication.isEnrolledAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'isEnrolledAsync');\n  }\n  return await ExpoLocalAuthentication.isEnrolledAsync();\n}\n\n// @needsAudit\n/**\n * Determine what kind of authentication is enrolled on the device.\n * @return Returns a promise which fulfils with [`SecurityLevel`](#securitylevel).\n * > **Note:** On Android devices prior to M, `SECRET` can be returned if only the SIM lock has been\n * enrolled, which is not the method that [`authenticateAsync`](#localauthenticationauthenticateasyncoptions)\n * prompts.\n */\nexport async function getEnrolledLevelAsync(): Promise<SecurityLevel> {\n  if (!ExpoLocalAuthentication.getEnrolledLevelAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'getEnrolledLevelAsync');\n  }\n  return await ExpoLocalAuthentication.getEnrolledLevelAsync();\n}\n\n// @needsAudit\n/**\n * Attempts to authenticate via Fingerprint/TouchID (or FaceID if available on the device).\n * > **Note:** Apple requires apps which use FaceID to provide a description of why they use this API.\n * If you try to use FaceID on an iPhone with FaceID without providing `infoPlist.NSFaceIDUsageDescription`\n * in `app.json`, the module will authenticate using device passcode. For more information about\n * usage descriptions on iOS, see [permissions guide](/guides/permissions/#ios).\n * @param options\n * @return Returns a promise which fulfils with [`LocalAuthenticationResult`](#localauthenticationresult).\n */\nexport async function authenticateAsync(\n  options: LocalAuthenticationOptions = {}\n): Promise<LocalAuthenticationResult> {\n  if (!ExpoLocalAuthentication.authenticateAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'authenticateAsync');\n  }\n\n  if (options.hasOwnProperty('promptMessage')) {\n    invariant(\n      typeof options.promptMessage === 'string' && options.promptMessage.length,\n      'LocalAuthentication.authenticateAsync : `options.promptMessage` must be a non-empty string.'\n    );\n  }\n\n  const promptMessage = options.promptMessage || 'Authenticate';\n  const result = await ExpoLocalAuthentication.authenticateAsync({ ...options, promptMessage });\n\n  return result;\n}\n\n// @needsAudit\n/**\n * Cancels authentication flow.\n * @platform android\n */\nexport async function cancelAuthenticate(): Promise<void> {\n  if (!ExpoLocalAuthentication.cancelAuthenticate) {\n    throw new UnavailabilityError('expo-local-authentication', 'cancelAuthenticate');\n  }\n  await ExpoLocalAuthentication.cancelAuthenticate();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}