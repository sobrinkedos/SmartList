{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useAuth } from \"./AuthContext\";\nimport * as SQLite from 'expo-sqlite';\nimport firestore from '@react-native-firebase/firestore';\nimport { v4 as uuidv4 } from 'uuid';\nimport { StoreService } from \"../services/storeService\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar StoresContext = createContext({});\nvar db = SQLite.openDatabase('smartlist.db');\nexport var StoresProvider = function StoresProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    stores = _useState2[0],\n    setStores = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  var _useState5 = useState('synced'),\n    _useState6 = _slicedToArray(_useState5, 2),\n    syncStatus = _useState6[0],\n    setSyncStatus = _useState6[1];\n  var _useAuth = useAuth(),\n    user = _useAuth.user,\n    isAuthenticated = _useAuth.isAuthenticated;\n  useEffect(function () {\n    loadStores();\n  }, []);\n  var loadStores = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        setLoading(true);\n        return new Promise(function (resolve, reject) {\n          db.transaction(function (tx) {\n            tx.executeSql('SELECT * FROM stores WHERE is_deleted = 0 ORDER BY name ASC', [], function (_, _ref3) {\n              var rows = _ref3.rows;\n              var storesList = rows._array.map(function (item) {\n                return _objectSpread(_objectSpread({}, item), {}, {\n                  latitude: item.latitude ? parseFloat(item.latitude) : null,\n                  longitude: item.longitude ? parseFloat(item.longitude) : null,\n                  created_at: item.created_at,\n                  updated_at: item.updated_at\n                });\n              });\n              setStores(storesList);\n              setLoading(false);\n              resolve({\n                success: true,\n                stores: storesList\n              });\n            }, function (_, error) {\n              console.error('Erro ao carregar lojas:', error);\n              setLoading(false);\n              reject({\n                success: false,\n                error: error\n              });\n              return false;\n            });\n          });\n        });\n      } catch (error) {\n        console.error('Erro ao carregar lojas:', error);\n        setLoading(false);\n        return {\n          success: false,\n          error: error\n        };\n      }\n    });\n    return function loadStores() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var getStoreById = function () {\n    var _ref4 = _asyncToGenerator(function* (id) {\n      try {\n        return new Promise(function (resolve, reject) {\n          db.transaction(function (tx) {\n            tx.executeSql('SELECT * FROM stores WHERE id = ? AND is_deleted = 0', [id], function (_, _ref5) {\n              var rows = _ref5.rows;\n              if (rows.length > 0) {\n                var store = rows.item(0);\n                resolve(_objectSpread(_objectSpread({}, store), {}, {\n                  latitude: store.latitude ? parseFloat(store.latitude) : null,\n                  longitude: store.longitude ? parseFloat(store.longitude) : null\n                }));\n              } else {\n                resolve(null);\n              }\n            }, function (_, error) {\n              console.error('Erro ao obter loja:', error);\n              reject(error);\n              return false;\n            });\n          });\n        });\n      } catch (error) {\n        console.error('Erro ao obter loja:', error);\n        return null;\n      }\n    });\n    return function getStoreById(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var addStore = function () {\n    var _ref6 = _asyncToGenerator(function* (storeData) {\n      try {\n        if (isAuthenticated && user) {\n          storeData.userId = user.uid;\n        }\n        var now = Date.now();\n        var storeId = storeData.id || uuidv4();\n        var store = {\n          id: storeId,\n          name: storeData.name,\n          address: storeData.address || '',\n          latitude: storeData.latitude || null,\n          longitude: storeData.longitude || null,\n          created_at: now,\n          updated_at: now,\n          is_synced: 0,\n          is_deleted: 0,\n          user_id: storeData.userId || null\n        };\n        return new Promise(function (resolve, reject) {\n          db.transaction(function (tx) {\n            tx.executeSql(`INSERT INTO stores (\n              id, name, address, latitude, longitude, created_at, updated_at, is_synced, is_deleted, user_id\n            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`, [store.id, store.name, store.address, store.latitude, store.longitude, store.created_at, store.updated_at, store.is_synced, store.is_deleted, store.user_id], function (_, result) {\n              setStores(function (prevStores) {\n                return [].concat(_toConsumableArray(prevStores), [store]);\n              });\n              if (isAuthenticated) {\n                syncWithFirestore();\n              }\n              resolve({\n                success: true,\n                store: _objectSpread(_objectSpread({}, storeData), {}, {\n                  id: storeId,\n                  created_at: now,\n                  updated_at: now\n                })\n              });\n            }, function (_, error) {\n              console.error('Erro ao adicionar loja:', error);\n              reject({\n                success: false,\n                error: error.message || 'Erro ao adicionar loja'\n              });\n              return false;\n            });\n          });\n        });\n      } catch (error) {\n        console.error('Erro ao adicionar loja:', error);\n        return {\n          success: false,\n          error: error.message || 'Erro ao adicionar loja'\n        };\n      }\n    });\n    return function addStore(_x2) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  var updateStore = function () {\n    var _ref7 = _asyncToGenerator(function* (storeData) {\n      try {\n        if (!storeData.id) {\n          return {\n            success: false,\n            error: 'ID da loja não fornecido'\n          };\n        }\n        var now = Date.now();\n        var store = {\n          name: storeData.name,\n          address: storeData.address || '',\n          latitude: storeData.latitude || null,\n          longitude: storeData.longitude || null,\n          updated_at: now,\n          is_synced: 0\n        };\n        return new Promise(function (resolve, reject) {\n          db.transaction(function (tx) {\n            tx.executeSql(`UPDATE stores SET \n              name = ?, address = ?, latitude = ?, longitude = ?, updated_at = ?, is_synced = ? \n            WHERE id = ?`, [store.name, store.address, store.latitude, store.longitude, store.updated_at, store.is_synced, storeData.id], function (_, result) {\n              if (result.rowsAffected > 0) {\n                setStores(function (prevStores) {\n                  return prevStores.map(function (s) {\n                    return s.id === storeData.id ? _objectSpread(_objectSpread(_objectSpread({}, s), store), {}, {\n                      id: storeData.id\n                    }) : s;\n                  });\n                });\n                if (isAuthenticated) {\n                  syncWithFirestore();\n                }\n                resolve({\n                  success: true,\n                  store: _objectSpread(_objectSpread({}, storeData), {}, {\n                    updated_at: now\n                  })\n                });\n              } else {\n                reject({\n                  success: false,\n                  error: 'Loja não encontrada'\n                });\n              }\n            }, function (_, error) {\n              console.error('Erro ao atualizar loja:', error);\n              reject({\n                success: false,\n                error: error.message || 'Erro ao atualizar loja'\n              });\n              return false;\n            });\n          });\n        });\n      } catch (error) {\n        console.error('Erro ao atualizar loja:', error);\n        return {\n          success: false,\n          error: error.message || 'Erro ao atualizar loja'\n        };\n      }\n    });\n    return function updateStore(_x3) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n  var deleteStore = function () {\n    var _ref8 = _asyncToGenerator(function* (storeId) {\n      try {\n        var now = Date.now();\n        return new Promise(function (resolve, reject) {\n          db.transaction(function (tx) {\n            tx.executeSql('UPDATE stores SET is_deleted = 1, updated_at = ?, is_synced = 0 WHERE id = ?', [now, storeId], function (_, result) {\n              if (result.rowsAffected > 0) {\n                setStores(function (prevStores) {\n                  return prevStores.filter(function (store) {\n                    return store.id !== storeId;\n                  });\n                });\n                if (isAuthenticated) {\n                  syncWithFirestore();\n                }\n                resolve({\n                  success: true\n                });\n              } else {\n                reject({\n                  success: false,\n                  error: 'Loja não encontrada'\n                });\n              }\n            }, function (_, error) {\n              console.error('Erro ao excluir loja:', error);\n              reject({\n                success: false,\n                error: error.message || 'Erro ao excluir loja'\n              });\n              return false;\n            });\n          });\n        });\n      } catch (error) {\n        console.error('Erro ao excluir loja:', error);\n        return {\n          success: false,\n          error: error.message || 'Erro ao excluir loja'\n        };\n      }\n    });\n    return function deleteStore(_x4) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n  var searchStores = function () {\n    var _ref9 = _asyncToGenerator(function* (query) {\n      try {\n        var searchTerm = `%${query}%`;\n        return new Promise(function (resolve, reject) {\n          db.transaction(function (tx) {\n            tx.executeSql(`SELECT * FROM stores \n             WHERE (name LIKE ? OR address LIKE ?) \n             AND is_deleted = 0 \n             ORDER BY name ASC`, [searchTerm, searchTerm], function (_, _ref10) {\n              var rows = _ref10.rows;\n              var storesList = rows._array.map(function (item) {\n                return _objectSpread(_objectSpread({}, item), {}, {\n                  latitude: item.latitude ? parseFloat(item.latitude) : null,\n                  longitude: item.longitude ? parseFloat(item.longitude) : null\n                });\n              });\n              resolve({\n                success: true,\n                stores: storesList\n              });\n            }, function (_, error) {\n              console.error('Erro ao buscar lojas:', error);\n              reject({\n                success: false,\n                error: error\n              });\n              return false;\n            });\n          });\n        });\n      } catch (error) {\n        console.error('Erro ao buscar lojas:', error);\n        return {\n          success: false,\n          error: error.message || 'Erro ao buscar lojas'\n        };\n      }\n    });\n    return function searchStores(_x5) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n  var syncWithFirestore = function () {\n    var _ref11 = _asyncToGenerator(function* () {\n      if (!isAuthenticated || !(user != null && user.uid)) {\n        return {\n          success: false,\n          error: 'Usuário não autenticado'\n        };\n      }\n      try {\n        setSyncStatus('syncing');\n        var unsyncedStores = yield new Promise(function (resolve, reject) {\n          _db.transaction(function (tx) {\n            tx.executeSql('SELECT * FROM stores WHERE is_synced = 0', [], function (_, _ref12) {\n              var rows = _ref12.rows;\n              return resolve(rows._array);\n            }, function (_, error) {\n              console.error('Erro ao obter lojas para sincronização:', error);\n              reject(error);\n              return false;\n            });\n          });\n        });\n        if (unsyncedStores.length === 0) {\n          setSyncStatus('synced');\n          return {\n            success: true,\n            message: 'Nenhuma loja para sincronizar'\n          };\n        }\n        var _db = firestore();\n        var batch = _db.batch();\n        for (var store of unsyncedStores) {\n          var storeRef = _db.collection('stores').doc(store.id);\n          if (store.is_deleted) {\n            batch.update(storeRef, {\n              isDeleted: true,\n              updatedAt: firestore.FieldValue.serverTimestamp()\n            });\n          } else {\n            batch.set(storeRef, {\n              name: store.name,\n              address: store.address,\n              latitude: store.latitude,\n              longitude: store.longitude,\n              userId: user.uid,\n              createdAt: firestore.Timestamp.fromMillis(store.created_at),\n              updatedAt: firestore.FieldValue.serverTimestamp(),\n              isDeleted: false\n            }, {\n              merge: true\n            });\n          }\n        }\n        yield batch.commit();\n        yield new Promise(function (resolve, reject) {\n          _db.transaction(function (tx) {\n            unsyncedStores.forEach(function (store) {\n              tx.executeSql('UPDATE stores SET is_synced = 1 WHERE id = ?', [store.id], null, function (_, error) {\n                console.error('Erro ao atualizar status de sincronização:', error);\n                return false;\n              });\n            });\n            resolve();\n          }, reject);\n        });\n        setSyncStatus('synced');\n        return {\n          success: true,\n          message: `${unsyncedStores.length} lojas sincronizadas com sucesso`\n        };\n      } catch (error) {\n        console.error('Erro na sincronização de lojas:', error);\n        setSyncStatus('offline');\n        return {\n          success: false,\n          error: error.message || 'Erro na sincronização de lojas'\n        };\n      }\n    });\n    return function syncWithFirestore() {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n  return _jsx(StoresContext.Provider, {\n    value: {\n      stores: stores,\n      loading: loading,\n      syncStatus: syncStatus,\n      loadStores: loadStores,\n      getStoreById: getStoreById,\n      addStore: addStore,\n      updateStore: updateStore,\n      deleteStore: deleteStore,\n      searchStores: searchStores,\n      syncWithFirestore: syncWithFirestore\n    },\n    children: children\n  });\n};\nexport var useStores = function useStores() {\n  return useContext(StoresContext);\n};","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","AsyncStorage","useAuth","SQLite","firestore","v4","uuidv4","StoreService","jsx","_jsx","StoresContext","db","openDatabase","StoresProvider","_ref","children","_useState","_useState2","_slicedToArray","stores","setStores","_useState3","_useState4","loading","setLoading","_useState5","_useState6","syncStatus","setSyncStatus","_useAuth","user","isAuthenticated","loadStores","_ref2","_asyncToGenerator","Promise","resolve","reject","transaction","tx","executeSql","_","_ref3","rows","storesList","_array","map","item","_objectSpread","latitude","parseFloat","longitude","created_at","updated_at","success","error","console","apply","arguments","getStoreById","_ref4","id","_ref5","length","store","_x","addStore","_ref6","storeData","userId","uid","now","Date","storeId","name","address","is_synced","is_deleted","user_id","result","prevStores","concat","_toConsumableArray","syncWithFirestore","message","_x2","updateStore","_ref7","rowsAffected","s","_x3","deleteStore","_ref8","filter","_x4","searchStores","_ref9","query","searchTerm","_ref10","_x5","_ref11","unsyncedStores","_ref12","batch","storeRef","collection","doc","update","isDeleted","updatedAt","FieldValue","serverTimestamp","set","createdAt","Timestamp","fromMillis","merge","commit","forEach","Provider","value","useStores"],"sources":["C:/Users/rilto/Downloads/meusProjetos/smartList/src/app/contexts/StoresContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { useAuth } from './AuthContext';\r\nimport * as SQLite from 'expo-sqlite';\r\nimport firestore from '@react-native-firebase/firestore';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { StoreService } from '../services/storeService';\r\n\r\nconst StoresContext = createContext({});\r\n\r\n// Abrir conexão com o banco de dados SQLite\r\nconst db = SQLite.openDatabase('smartlist.db');\r\n\r\nexport const StoresProvider = ({ children }) => {\r\n  const [stores, setStores] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [syncStatus, setSyncStatus] = useState('synced'); // 'synced', 'syncing', 'offline'\r\n  const { user, isAuthenticated } = useAuth();\r\n\r\n  // Carregar lojas ao iniciar\r\n  useEffect(() => {\r\n    loadStores();\r\n  }, []);\r\n\r\n  // Carregar lojas do banco de dados local\r\n  const loadStores = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      return new Promise((resolve, reject) => {\r\n        db.transaction(tx => {\r\n          tx.executeSql(\r\n            'SELECT * FROM stores WHERE is_deleted = 0 ORDER BY name ASC',\r\n            [],\r\n            (_, { rows }) => {\r\n              const storesList = rows._array.map(item => ({\r\n                ...item,\r\n                latitude: item.latitude ? parseFloat(item.latitude) : null,\r\n                longitude: item.longitude ? parseFloat(item.longitude) : null,\r\n                created_at: item.created_at,\r\n                updated_at: item.updated_at\r\n              }));\r\n              \r\n              setStores(storesList);\r\n              setLoading(false);\r\n              resolve({ success: true, stores: storesList });\r\n            },\r\n            (_, error) => {\r\n              console.error('Erro ao carregar lojas:', error);\r\n              setLoading(false);\r\n              reject({ success: false, error });\r\n              return false;\r\n            }\r\n          );\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.error('Erro ao carregar lojas:', error);\r\n      setLoading(false);\r\n      return { success: false, error };\r\n    }\r\n  };\r\n\r\n  // Obter loja por ID\r\n  const getStoreById = async (id) => {\r\n    try {\r\n      return new Promise((resolve, reject) => {\r\n        db.transaction(tx => {\r\n          tx.executeSql(\r\n            'SELECT * FROM stores WHERE id = ? AND is_deleted = 0',\r\n            [id],\r\n            (_, { rows }) => {\r\n              if (rows.length > 0) {\r\n                const store = rows.item(0);\r\n                resolve({\r\n                  ...store,\r\n                  latitude: store.latitude ? parseFloat(store.latitude) : null,\r\n                  longitude: store.longitude ? parseFloat(store.longitude) : null,\r\n                });\r\n              } else {\r\n                resolve(null);\r\n              }\r\n            },\r\n            (_, error) => {\r\n              console.error('Erro ao obter loja:', error);\r\n              reject(error);\r\n              return false;\r\n            }\r\n          );\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.error('Erro ao obter loja:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Adicionar nova loja\r\n  const addStore = async (storeData) => {\r\n    try {\r\n      // Adicionar ID do usuário se estiver autenticado\r\n      if (isAuthenticated && user) {\r\n        storeData.userId = user.uid;\r\n      }\r\n\r\n      const now = Date.now();\r\n      const storeId = storeData.id || uuidv4();\r\n      \r\n      const store = {\r\n        id: storeId,\r\n        name: storeData.name,\r\n        address: storeData.address || '',\r\n        latitude: storeData.latitude || null,\r\n        longitude: storeData.longitude || null,\r\n        created_at: now,\r\n        updated_at: now,\r\n        is_synced: 0,\r\n        is_deleted: 0,\r\n        user_id: storeData.userId || null,\r\n      };\r\n\r\n      return new Promise((resolve, reject) => {\r\n        db.transaction(tx => {\r\n          tx.executeSql(\r\n            `INSERT INTO stores (\r\n              id, name, address, latitude, longitude, created_at, updated_at, is_synced, is_deleted, user_id\r\n            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,\r\n            [\r\n              store.id, store.name, store.address, store.latitude, store.longitude,\r\n              store.created_at, store.updated_at, store.is_synced, store.is_deleted, store.user_id\r\n            ],\r\n            (_, result) => {\r\n              // Atualizar lista de lojas\r\n              setStores(prevStores => [...prevStores, store]);\r\n              \r\n              // Tentar sincronizar com o Firestore se estiver autenticado\r\n              if (isAuthenticated) {\r\n                syncWithFirestore();\r\n              }\r\n              \r\n              resolve({\r\n                success: true,\r\n                store: {\r\n                  ...storeData,\r\n                  id: storeId,\r\n                  created_at: now,\r\n                  updated_at: now,\r\n                }\r\n              });\r\n            },\r\n            (_, error) => {\r\n              console.error('Erro ao adicionar loja:', error);\r\n              reject({\r\n                success: false,\r\n                error: error.message || 'Erro ao adicionar loja'\r\n              });\r\n              return false;\r\n            }\r\n          );\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.error('Erro ao adicionar loja:', error);\r\n      return { success: false, error: error.message || 'Erro ao adicionar loja' };\r\n    }\r\n  };\r\n\r\n  // Atualizar loja existente\r\n  const updateStore = async (storeData) => {\r\n    try {\r\n      if (!storeData.id) {\r\n        return {\r\n          success: false,\r\n          error: 'ID da loja não fornecido'\r\n        };\r\n      }\r\n\r\n      const now = Date.now();\r\n      \r\n      const store = {\r\n        name: storeData.name,\r\n        address: storeData.address || '',\r\n        latitude: storeData.latitude || null,\r\n        longitude: storeData.longitude || null,\r\n        updated_at: now,\r\n        is_synced: 0,\r\n      };\r\n\r\n      return new Promise((resolve, reject) => {\r\n        db.transaction(tx => {\r\n          tx.executeSql(\r\n            `UPDATE stores SET \r\n              name = ?, address = ?, latitude = ?, longitude = ?, updated_at = ?, is_synced = ? \r\n            WHERE id = ?`,\r\n            [\r\n              store.name, store.address, store.latitude, store.longitude,\r\n              store.updated_at, store.is_synced, storeData.id\r\n            ],\r\n            (_, result) => {\r\n              if (result.rowsAffected > 0) {\r\n                // Atualizar lista de lojas\r\n                setStores(prevStores => \r\n                  prevStores.map(s => \r\n                    s.id === storeData.id ? { ...s, ...store, id: storeData.id } : s\r\n                  )\r\n                );\r\n                \r\n                // Tentar sincronizar com o Firestore se estiver autenticado\r\n                if (isAuthenticated) {\r\n                  syncWithFirestore();\r\n                }\r\n                \r\n                resolve({\r\n                  success: true,\r\n                  store: {\r\n                    ...storeData,\r\n                    updated_at: now,\r\n                  }\r\n                });\r\n              } else {\r\n                reject({\r\n                  success: false,\r\n                  error: 'Loja não encontrada'\r\n                });\r\n              }\r\n            },\r\n            (_, error) => {\r\n              console.error('Erro ao atualizar loja:', error);\r\n              reject({\r\n                success: false,\r\n                error: error.message || 'Erro ao atualizar loja'\r\n              });\r\n              return false;\r\n            }\r\n          );\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.error('Erro ao atualizar loja:', error);\r\n      return { success: false, error: error.message || 'Erro ao atualizar loja' };\r\n    }\r\n  };\r\n\r\n  // Excluir loja\r\n  const deleteStore = async (storeId) => {\r\n    try {\r\n      const now = Date.now();\r\n\r\n      return new Promise((resolve, reject) => {\r\n        db.transaction(tx => {\r\n          tx.executeSql(\r\n            'UPDATE stores SET is_deleted = 1, updated_at = ?, is_synced = 0 WHERE id = ?',\r\n            [now, storeId],\r\n            (_, result) => {\r\n              if (result.rowsAffected > 0) {\r\n                // Atualizar lista de lojas\r\n                setStores(prevStores => \r\n                  prevStores.filter(store => store.id !== storeId)\r\n                );\r\n                \r\n                // Tentar sincronizar com o Firestore se estiver autenticado\r\n                if (isAuthenticated) {\r\n                  syncWithFirestore();\r\n                }\r\n                \r\n                resolve({ success: true });\r\n              } else {\r\n                reject({\r\n                  success: false,\r\n                  error: 'Loja não encontrada'\r\n                });\r\n              }\r\n            },\r\n            (_, error) => {\r\n              console.error('Erro ao excluir loja:', error);\r\n              reject({\r\n                success: false,\r\n                error: error.message || 'Erro ao excluir loja'\r\n              });\r\n              return false;\r\n            }\r\n          );\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.error('Erro ao excluir loja:', error);\r\n      return { success: false, error: error.message || 'Erro ao excluir loja' };\r\n    }\r\n  };\r\n\r\n  // Buscar lojas por texto\r\n  const searchStores = async (query) => {\r\n    try {\r\n      const searchTerm = `%${query}%`;\r\n      \r\n      return new Promise((resolve, reject) => {\r\n        db.transaction(tx => {\r\n          tx.executeSql(\r\n            `SELECT * FROM stores \r\n             WHERE (name LIKE ? OR address LIKE ?) \r\n             AND is_deleted = 0 \r\n             ORDER BY name ASC`,\r\n            [searchTerm, searchTerm],\r\n            (_, { rows }) => {\r\n              const storesList = rows._array.map(item => ({\r\n                ...item,\r\n                latitude: item.latitude ? parseFloat(item.latitude) : null,\r\n                longitude: item.longitude ? parseFloat(item.longitude) : null,\r\n              }));\r\n              resolve({ success: true, stores: storesList });\r\n            },\r\n            (_, error) => {\r\n              console.error('Erro ao buscar lojas:', error);\r\n              reject({ success: false, error });\r\n              return false;\r\n            }\r\n          );\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.error('Erro ao buscar lojas:', error);\r\n      return { success: false, error: error.message || 'Erro ao buscar lojas' };\r\n    }\r\n  };\r\n\r\n  // Sincronizar com o Firestore\r\n  const syncWithFirestore = async () => {\r\n    if (!isAuthenticated || !user?.uid) {\r\n      return { success: false, error: 'Usuário não autenticado' };\r\n    }\r\n    \r\n    try {\r\n      setSyncStatus('syncing');\r\n      \r\n      // Obter lojas não sincronizadas\r\n      const unsyncedStores = await new Promise((resolve, reject) => {\r\n        db.transaction(tx => {\r\n          tx.executeSql(\r\n            'SELECT * FROM stores WHERE is_synced = 0',\r\n            [],\r\n            (_, { rows }) => resolve(rows._array),\r\n            (_, error) => {\r\n              console.error('Erro ao obter lojas para sincronização:', error);\r\n              reject(error);\r\n              return false;\r\n            }\r\n          );\r\n        });\r\n      });\r\n\r\n      if (unsyncedStores.length === 0) {\r\n        setSyncStatus('synced');\r\n        return { success: true, message: 'Nenhuma loja para sincronizar' };\r\n      }\r\n\r\n      // Sincronizar com o Firestore\r\n      const db = firestore();\r\n      const batch = db.batch();\r\n      \r\n      for (const store of unsyncedStores) {\r\n        const storeRef = db.collection('stores').doc(store.id);\r\n        \r\n        if (store.is_deleted) {\r\n          // Marcar como excluído no Firestore\r\n          batch.update(storeRef, { isDeleted: true, updatedAt: firestore.FieldValue.serverTimestamp() });\r\n        } else {\r\n          // Adicionar ou atualizar no Firestore\r\n          batch.set(storeRef, {\r\n            name: store.name,\r\n            address: store.address,\r\n            latitude: store.latitude,\r\n            longitude: store.longitude,\r\n            userId: user.uid,\r\n            createdAt: firestore.Timestamp.fromMillis(store.created_at),\r\n            updatedAt: firestore.FieldValue.serverTimestamp(),\r\n            isDeleted: false\r\n          }, { merge: true });\r\n        }\r\n      }\r\n      \r\n      await batch.commit();\r\n      \r\n      // Atualizar status de sincronização no banco local\r\n      await new Promise((resolve, reject) => {\r\n        db.transaction(tx => {\r\n          unsyncedStores.forEach(store => {\r\n            tx.executeSql(\r\n              'UPDATE stores SET is_synced = 1 WHERE id = ?',\r\n              [store.id],\r\n              null,\r\n              (_, error) => {\r\n                console.error('Erro ao atualizar status de sincronização:', error);\r\n                return false;\r\n              }\r\n            );\r\n          });\r\n          resolve();\r\n        }, reject);\r\n      });\r\n      \r\n      setSyncStatus('synced');\r\n      return { \r\n        success: true, \r\n        message: `${unsyncedStores.length} lojas sincronizadas com sucesso` \r\n      };\r\n    } catch (error) {\r\n      console.error('Erro na sincronização de lojas:', error);\r\n      setSyncStatus('offline');\r\n      return { \r\n        success: false, \r\n        error: error.message || 'Erro na sincronização de lojas' \r\n      };\r\n    }\r\n  };\r\n\r\n  return (\r\n    <StoresContext.Provider\r\n      value={{\r\n        stores,\r\n        loading,\r\n        syncStatus,\r\n        loadStores,\r\n        getStoreById,\r\n        addStore,\r\n        updateStore,\r\n        deleteStore,\r\n        searchStores,\r\n        syncWithFirestore,\r\n      }}\r\n    >\r\n      {children}\r\n    </StoresContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useStores = () => useContext(StoresContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}