{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport { isBoolean, isFunction, isNumber, isObject, isString, isUndefined, isAndroid } from '@react-native-firebase/app/lib/common';\nimport { createModuleNamespace, FirebaseModule, getFirebaseRoot } from '@react-native-firebase/app/lib/internal';\nimport FirestoreCollectionReference from \"./FirestoreCollectionReference\";\nimport FirestoreDocumentReference from \"./FirestoreDocumentReference\";\nimport FirestorePath from \"./FirestorePath\";\nimport FirestoreQuery from \"./FirestoreQuery\";\nimport FirestoreQueryModifiers from \"./FirestoreQueryModifiers\";\nimport FirestoreStatics from \"./FirestoreStatics\";\nimport FirestoreTransactionHandler from \"./FirestoreTransactionHandler\";\nimport FirestoreWriteBatch from \"./FirestoreWriteBatch\";\nimport version from \"./version\";\nvar namespace = 'firestore';\nvar nativeModuleName = ['RNFBFirestoreModule', 'RNFBFirestoreCollectionModule', 'RNFBFirestoreDocumentModule', 'RNFBFirestoreTransactionModule'];\nvar nativeEvents = ['firestore_collection_sync_event', 'firestore_document_sync_event', 'firestore_transaction_event'];\nvar FirebaseFirestoreModule = function (_FirebaseModule) {\n  function FirebaseFirestoreModule(app, config) {\n    var _this;\n    _classCallCheck(this, FirebaseFirestoreModule);\n    _this = _callSuper(this, FirebaseFirestoreModule, [app, config]);\n    _this._referencePath = new FirestorePath();\n    _this._transactionHandler = new FirestoreTransactionHandler(_this);\n    _this.emitter.addListener(_this.eventNameForApp('firestore_collection_sync_event'), function (event) {\n      _this.emitter.emit(_this.eventNameForApp(`firestore_collection_sync_event:${event.listenerId}`), event);\n    });\n    _this.emitter.addListener(_this.eventNameForApp('firestore_document_sync_event'), function (event) {\n      _this.emitter.emit(_this.eventNameForApp(`firestore_document_sync_event:${event.listenerId}`), event);\n    });\n    _this._settings = {\n      ignoreUndefinedProperties: false\n    };\n    return _this;\n  }\n  _inherits(FirebaseFirestoreModule, _FirebaseModule);\n  return _createClass(FirebaseFirestoreModule, [{\n    key: \"batch\",\n    value: function batch() {\n      return new FirestoreWriteBatch(this);\n    }\n  }, {\n    key: \"loadBundle\",\n    value: function loadBundle(bundle) {\n      if (!isString(bundle)) {\n        throw new Error(\"firebase.firestore().loadBundle(*) 'bundle' must be a string value.\");\n      }\n      if (bundle === '') {\n        throw new Error(\"firebase.firestore().loadBundle(*) 'bundle' must be a non-empty string.\");\n      }\n      return this.native.loadBundle(bundle);\n    }\n  }, {\n    key: \"namedQuery\",\n    value: function namedQuery(queryName) {\n      if (!isString(queryName)) {\n        throw new Error(\"firebase.firestore().namedQuery(*) 'queryName' must be a string value.\");\n      }\n      if (queryName === '') {\n        throw new Error(\"firebase.firestore().namedQuery(*) 'queryName' must be a non-empty string.\");\n      }\n      return new FirestoreQuery(this, this._referencePath, new FirestoreQueryModifiers(), queryName);\n    }\n  }, {\n    key: \"clearPersistence\",\n    value: function () {\n      var _clearPersistence = _asyncToGenerator(function* () {\n        yield this.native.clearPersistence();\n      });\n      function clearPersistence() {\n        return _clearPersistence.apply(this, arguments);\n      }\n      return clearPersistence;\n    }()\n  }, {\n    key: \"waitForPendingWrites\",\n    value: function () {\n      var _waitForPendingWrites = _asyncToGenerator(function* () {\n        yield this.native.waitForPendingWrites();\n      });\n      function waitForPendingWrites() {\n        return _waitForPendingWrites.apply(this, arguments);\n      }\n      return waitForPendingWrites;\n    }()\n  }, {\n    key: \"terminate\",\n    value: function () {\n      var _terminate = _asyncToGenerator(function* () {\n        yield this.native.terminate();\n      });\n      function terminate() {\n        return _terminate.apply(this, arguments);\n      }\n      return terminate;\n    }()\n  }, {\n    key: \"useEmulator\",\n    value: function useEmulator(host, port) {\n      if (!host || !isString(host) || !port || !isNumber(port)) {\n        throw new Error('firebase.firestore().useEmulator() takes a non-empty host and port');\n      }\n      var _host = host;\n      var androidBypassEmulatorUrlRemap = typeof this.firebaseJson.android_bypass_emulator_url_remap === 'boolean' && this.firebaseJson.android_bypass_emulator_url_remap;\n      if (!androidBypassEmulatorUrlRemap && isAndroid && _host) {\n        if (_host === 'localhost' || _host === '127.0.0.1') {\n          _host = '10.0.2.2';\n          console.log('Mapping firestore host to \"10.0.2.2\" for android emulators. Use real IP on real devices. You can bypass this behaviour with \"android_bypass_emulator_url_remap\" flag.');\n        }\n      }\n      this.native.useEmulator(_host, port);\n      return [_host, port];\n    }\n  }, {\n    key: \"collection\",\n    value: function collection(collectionPath) {\n      if (!isString(collectionPath)) {\n        throw new Error(\"firebase.firestore().collection(*) 'collectionPath' must be a string value.\");\n      }\n      if (collectionPath === '') {\n        throw new Error(\"firebase.firestore().collection(*) 'collectionPath' must be a non-empty string.\");\n      }\n      var path = this._referencePath.child(collectionPath);\n      if (!path.isCollection) {\n        throw new Error(\"firebase.firestore().collection(*) 'collectionPath' must point to a collection.\");\n      }\n      return new FirestoreCollectionReference(this, path);\n    }\n  }, {\n    key: \"collectionGroup\",\n    value: function collectionGroup(collectionId) {\n      if (!isString(collectionId)) {\n        throw new Error(\"firebase.firestore().collectionGroup(*) 'collectionId' must be a string value.\");\n      }\n      if (collectionId === '') {\n        throw new Error(\"firebase.firestore().collectionGroup(*) 'collectionId' must be a non-empty string.\");\n      }\n      if (collectionId.indexOf('/') >= 0) {\n        throw new Error(\"firebase.firestore().collectionGroup(*) 'collectionId' must not contain '/'.\");\n      }\n      return new FirestoreQuery(this, this._referencePath.child(collectionId), new FirestoreQueryModifiers().asCollectionGroupQuery(), undefined);\n    }\n  }, {\n    key: \"disableNetwork\",\n    value: function () {\n      var _disableNetwork = _asyncToGenerator(function* () {\n        yield this.native.disableNetwork();\n      });\n      function disableNetwork() {\n        return _disableNetwork.apply(this, arguments);\n      }\n      return disableNetwork;\n    }()\n  }, {\n    key: \"doc\",\n    value: function doc(documentPath) {\n      if (!isString(documentPath)) {\n        throw new Error(\"firebase.firestore().doc(*) 'documentPath' must be a string value.\");\n      }\n      if (documentPath === '') {\n        throw new Error(\"firebase.firestore().doc(*) 'documentPath' must be a non-empty string.\");\n      }\n      var path = this._referencePath.child(documentPath);\n      if (!path.isDocument) {\n        throw new Error(\"firebase.firestore().doc(*) 'documentPath' must point to a document.\");\n      }\n      return new FirestoreDocumentReference(this, path);\n    }\n  }, {\n    key: \"enableNetwork\",\n    value: function () {\n      var _enableNetwork = _asyncToGenerator(function* () {\n        yield this.native.enableNetwork();\n      });\n      function enableNetwork() {\n        return _enableNetwork.apply(this, arguments);\n      }\n      return enableNetwork;\n    }()\n  }, {\n    key: \"runTransaction\",\n    value: function runTransaction(updateFunction) {\n      if (!isFunction(updateFunction)) {\n        return Promise.reject(new Error(\"firebase.firestore().runTransaction(*) 'updateFunction' must be a function.\"));\n      }\n      return this._transactionHandler._add(updateFunction);\n    }\n  }, {\n    key: \"settings\",\n    value: function settings(_settings) {\n      if (!isObject(_settings)) {\n        return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings' must be an object.\"));\n      }\n      var keys = Object.keys(_settings);\n      var opts = ['cacheSizeBytes', 'host', 'persistence', 'ssl', 'ignoreUndefinedProperties', 'serverTimestampBehavior'];\n      for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        if (!opts.includes(key)) {\n          return Promise.reject(new Error(`firebase.firestore().settings(*) 'settings.${key}' is not a valid settings field.`));\n        }\n      }\n      if (!isUndefined(_settings.cacheSizeBytes)) {\n        if (!isNumber(_settings.cacheSizeBytes)) {\n          return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.cacheSizeBytes' must be a number value.\"));\n        }\n        if (_settings.cacheSizeBytes !== FirestoreStatics.CACHE_SIZE_UNLIMITED && _settings.cacheSizeBytes < 1048576) {\n          return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.cacheSizeBytes' the minimum cache size is 1048576 bytes (1MB).\"));\n        }\n      }\n      if (!isUndefined(_settings.host)) {\n        console.warn('host in settings to connect with firestore emulator is deprecated. Use useEmulator instead.');\n        if (!isString(_settings.host)) {\n          return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.host' must be a string value.\"));\n        }\n        if (_settings.host === '') {\n          return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.host' must not be an empty string.\"));\n        }\n        if (isAndroid) {\n          if (_settings.host.startsWith('localhost')) {\n            _settings.host = _settings.host.replace('localhost', '10.0.2.2');\n            console.log('Mapping firestore host \"localhost\" to \"10.0.2.2\" for android emulators. Use real IP on real devices.');\n          }\n          if (_settings.host.startsWith('127.0.0.1')) {\n            _settings.host = _settings.host.replace('127.0.0.1', '10.0.2.2');\n            console.log('Mapping firestore host \"127.0.0.1\" to \"10.0.2.2\" for android emulators. Use real IP on real devices.');\n          }\n        }\n      }\n      if (!isUndefined(_settings.persistence) && !isBoolean(_settings.persistence)) {\n        return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.persistence' must be a boolean value.\"));\n      }\n      if (!isUndefined(_settings.ssl) && !isBoolean(_settings.ssl)) {\n        throw new Error(\"firebase.firestore().settings(*) 'settings.ssl' must be a boolean value.\");\n      }\n      if (!isUndefined(_settings.serverTimestampBehavior) && !['estimate', 'previous', 'none'].includes(_settings.serverTimestampBehavior)) {\n        return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.serverTimestampBehavior' must be one of 'estimate', 'previous', 'none'.\"));\n      }\n      if (!isUndefined(_settings.ignoreUndefinedProperties)) {\n        if (!isBoolean(_settings.ignoreUndefinedProperties)) {\n          return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.ignoreUndefinedProperties' must be a boolean value.\"));\n        } else {\n          this._settings.ignoreUndefinedProperties = _settings.ignoreUndefinedProperties;\n        }\n        delete _settings.ignoreUndefinedProperties;\n      }\n      return this.native.settings(_settings);\n    }\n  }]);\n}(FirebaseModule);\nexport var SDK_VERSION = version;\nexport * from \"./modular\";\nexport default createModuleNamespace({\n  statics: FirestoreStatics,\n  version: version,\n  namespace: namespace,\n  nativeModuleName: nativeModuleName,\n  nativeEvents: nativeEvents,\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: false,\n  ModuleClass: FirebaseFirestoreModule\n});\nexport var firebase = getFirebaseRoot();","map":{"version":3,"names":["isBoolean","isFunction","isNumber","isObject","isString","isUndefined","isAndroid","createModuleNamespace","FirebaseModule","getFirebaseRoot","FirestoreCollectionReference","FirestoreDocumentReference","FirestorePath","FirestoreQuery","FirestoreQueryModifiers","FirestoreStatics","FirestoreTransactionHandler","FirestoreWriteBatch","version","namespace","nativeModuleName","nativeEvents","FirebaseFirestoreModule","_FirebaseModule","app","config","_this","_classCallCheck","_callSuper","_referencePath","_transactionHandler","emitter","addListener","eventNameForApp","event","emit","listenerId","_settings","ignoreUndefinedProperties","_inherits","_createClass","key","value","batch","loadBundle","bundle","Error","native","namedQuery","queryName","_clearPersistence","_asyncToGenerator","clearPersistence","apply","arguments","_waitForPendingWrites","waitForPendingWrites","_terminate","terminate","useEmulator","host","port","_host","androidBypassEmulatorUrlRemap","firebaseJson","android_bypass_emulator_url_remap","console","log","collection","collectionPath","path","child","isCollection","collectionGroup","collectionId","indexOf","asCollectionGroupQuery","undefined","_disableNetwork","disableNetwork","doc","documentPath","isDocument","_enableNetwork","enableNetwork","runTransaction","updateFunction","Promise","reject","_add","settings","keys","Object","opts","i","length","includes","cacheSizeBytes","CACHE_SIZE_UNLIMITED","warn","startsWith","replace","persistence","ssl","serverTimestampBehavior","SDK_VERSION","statics","hasMultiAppSupport","hasCustomUrlOrRegionSupport","ModuleClass","firebase"],"sources":["C:/Users/rilto/Downloads/meusProjetos/smartList/node_modules/@react-native-firebase/firestore/lib/index.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isBoolean,\n  isFunction,\n  isNumber,\n  isObject,\n  isString,\n  isUndefined,\n  isAndroid,\n} from '@react-native-firebase/app/lib/common';\nimport {\n  createModuleNamespace,\n  FirebaseModule,\n  getFirebaseRoot,\n} from '@react-native-firebase/app/lib/internal';\nimport FirestoreCollectionReference from './FirestoreCollectionReference';\nimport FirestoreDocumentReference from './FirestoreDocumentReference';\nimport FirestorePath from './FirestorePath';\nimport FirestoreQuery from './FirestoreQuery';\nimport FirestoreQueryModifiers from './FirestoreQueryModifiers';\nimport FirestoreStatics from './FirestoreStatics';\nimport FirestoreTransactionHandler from './FirestoreTransactionHandler';\nimport FirestoreWriteBatch from './FirestoreWriteBatch';\nimport version from './version';\n\nconst namespace = 'firestore';\n\nconst nativeModuleName = [\n  'RNFBFirestoreModule',\n  'RNFBFirestoreCollectionModule',\n  'RNFBFirestoreDocumentModule',\n  'RNFBFirestoreTransactionModule',\n];\n\nconst nativeEvents = [\n  'firestore_collection_sync_event',\n  'firestore_document_sync_event',\n  'firestore_transaction_event',\n];\n\nclass FirebaseFirestoreModule extends FirebaseModule {\n  constructor(app, config) {\n    super(app, config);\n    this._referencePath = new FirestorePath();\n    this._transactionHandler = new FirestoreTransactionHandler(this);\n\n    // Fan out native events\n    this.emitter.addListener(this.eventNameForApp('firestore_collection_sync_event'), event => {\n      this.emitter.emit(\n        this.eventNameForApp(`firestore_collection_sync_event:${event.listenerId}`),\n        event,\n      );\n    });\n\n    this.emitter.addListener(this.eventNameForApp('firestore_document_sync_event'), event => {\n      this.emitter.emit(\n        this.eventNameForApp(`firestore_document_sync_event:${event.listenerId}`),\n        event,\n      );\n    });\n\n    this._settings = {\n      ignoreUndefinedProperties: false,\n    };\n  }\n\n  batch() {\n    return new FirestoreWriteBatch(this);\n  }\n\n  loadBundle(bundle) {\n    if (!isString(bundle)) {\n      throw new Error(\"firebase.firestore().loadBundle(*) 'bundle' must be a string value.\");\n    }\n\n    if (bundle === '') {\n      throw new Error(\"firebase.firestore().loadBundle(*) 'bundle' must be a non-empty string.\");\n    }\n\n    return this.native.loadBundle(bundle);\n  }\n\n  namedQuery(queryName) {\n    if (!isString(queryName)) {\n      throw new Error(\"firebase.firestore().namedQuery(*) 'queryName' must be a string value.\");\n    }\n\n    if (queryName === '') {\n      throw new Error(\"firebase.firestore().namedQuery(*) 'queryName' must be a non-empty string.\");\n    }\n\n    return new FirestoreQuery(this, this._referencePath, new FirestoreQueryModifiers(), queryName);\n  }\n\n  async clearPersistence() {\n    await this.native.clearPersistence();\n  }\n\n  async waitForPendingWrites() {\n    await this.native.waitForPendingWrites();\n  }\n\n  async terminate() {\n    await this.native.terminate();\n  }\n\n  useEmulator(host, port) {\n    if (!host || !isString(host) || !port || !isNumber(port)) {\n      throw new Error('firebase.firestore().useEmulator() takes a non-empty host and port');\n    }\n    let _host = host;\n    const androidBypassEmulatorUrlRemap =\n      typeof this.firebaseJson.android_bypass_emulator_url_remap === 'boolean' &&\n      this.firebaseJson.android_bypass_emulator_url_remap;\n    if (!androidBypassEmulatorUrlRemap && isAndroid && _host) {\n      if (_host === 'localhost' || _host === '127.0.0.1') {\n        _host = '10.0.2.2';\n        // eslint-disable-next-line no-console\n        console.log(\n          'Mapping firestore host to \"10.0.2.2\" for android emulators. Use real IP on real devices. You can bypass this behaviour with \"android_bypass_emulator_url_remap\" flag.',\n        );\n      }\n    }\n    this.native.useEmulator(_host, port);\n    return [_host, port]; // undocumented return, just used to unit test android host remapping\n  }\n\n  collection(collectionPath) {\n    if (!isString(collectionPath)) {\n      throw new Error(\n        \"firebase.firestore().collection(*) 'collectionPath' must be a string value.\",\n      );\n    }\n\n    if (collectionPath === '') {\n      throw new Error(\n        \"firebase.firestore().collection(*) 'collectionPath' must be a non-empty string.\",\n      );\n    }\n\n    const path = this._referencePath.child(collectionPath);\n\n    if (!path.isCollection) {\n      throw new Error(\n        \"firebase.firestore().collection(*) 'collectionPath' must point to a collection.\",\n      );\n    }\n\n    return new FirestoreCollectionReference(this, path);\n  }\n\n  collectionGroup(collectionId) {\n    if (!isString(collectionId)) {\n      throw new Error(\n        \"firebase.firestore().collectionGroup(*) 'collectionId' must be a string value.\",\n      );\n    }\n\n    if (collectionId === '') {\n      throw new Error(\n        \"firebase.firestore().collectionGroup(*) 'collectionId' must be a non-empty string.\",\n      );\n    }\n\n    if (collectionId.indexOf('/') >= 0) {\n      throw new Error(\n        \"firebase.firestore().collectionGroup(*) 'collectionId' must not contain '/'.\",\n      );\n    }\n\n    return new FirestoreQuery(\n      this,\n      this._referencePath.child(collectionId),\n      new FirestoreQueryModifiers().asCollectionGroupQuery(),\n      undefined,\n    );\n  }\n\n  async disableNetwork() {\n    await this.native.disableNetwork();\n  }\n\n  doc(documentPath) {\n    if (!isString(documentPath)) {\n      throw new Error(\"firebase.firestore().doc(*) 'documentPath' must be a string value.\");\n    }\n\n    if (documentPath === '') {\n      throw new Error(\"firebase.firestore().doc(*) 'documentPath' must be a non-empty string.\");\n    }\n\n    const path = this._referencePath.child(documentPath);\n\n    if (!path.isDocument) {\n      throw new Error(\"firebase.firestore().doc(*) 'documentPath' must point to a document.\");\n    }\n\n    return new FirestoreDocumentReference(this, path);\n  }\n\n  async enableNetwork() {\n    await this.native.enableNetwork();\n  }\n\n  runTransaction(updateFunction) {\n    if (!isFunction(updateFunction)) {\n      return Promise.reject(\n        new Error(\"firebase.firestore().runTransaction(*) 'updateFunction' must be a function.\"),\n      );\n    }\n\n    return this._transactionHandler._add(updateFunction);\n  }\n\n  settings(settings) {\n    if (!isObject(settings)) {\n      return Promise.reject(\n        new Error(\"firebase.firestore().settings(*) 'settings' must be an object.\"),\n      );\n    }\n\n    const keys = Object.keys(settings);\n\n    const opts = [\n      'cacheSizeBytes',\n      'host',\n      'persistence',\n      'ssl',\n      'ignoreUndefinedProperties',\n      'serverTimestampBehavior',\n    ];\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if (!opts.includes(key)) {\n        return Promise.reject(\n          new Error(\n            `firebase.firestore().settings(*) 'settings.${key}' is not a valid settings field.`,\n          ),\n        );\n      }\n    }\n\n    if (!isUndefined(settings.cacheSizeBytes)) {\n      if (!isNumber(settings.cacheSizeBytes)) {\n        return Promise.reject(\n          new Error(\n            \"firebase.firestore().settings(*) 'settings.cacheSizeBytes' must be a number value.\",\n          ),\n        );\n      }\n\n      if (\n        settings.cacheSizeBytes !== FirestoreStatics.CACHE_SIZE_UNLIMITED &&\n        settings.cacheSizeBytes < 1048576 // 1MB\n      ) {\n        return Promise.reject(\n          new Error(\n            \"firebase.firestore().settings(*) 'settings.cacheSizeBytes' the minimum cache size is 1048576 bytes (1MB).\",\n          ),\n        );\n      }\n    }\n\n    if (!isUndefined(settings.host)) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'host in settings to connect with firestore emulator is deprecated. Use useEmulator instead.',\n      );\n      if (!isString(settings.host)) {\n        return Promise.reject(\n          new Error(\"firebase.firestore().settings(*) 'settings.host' must be a string value.\"),\n        );\n      }\n\n      if (settings.host === '') {\n        return Promise.reject(\n          new Error(\n            \"firebase.firestore().settings(*) 'settings.host' must not be an empty string.\",\n          ),\n        );\n      }\n\n      if (isAndroid) {\n        if (settings.host.startsWith('localhost')) {\n          settings.host = settings.host.replace('localhost', '10.0.2.2');\n          // eslint-disable-next-line no-console\n          console.log(\n            'Mapping firestore host \"localhost\" to \"10.0.2.2\" for android emulators. Use real IP on real devices.',\n          );\n        }\n        if (settings.host.startsWith('127.0.0.1')) {\n          settings.host = settings.host.replace('127.0.0.1', '10.0.2.2');\n          // eslint-disable-next-line no-console\n          console.log(\n            'Mapping firestore host \"127.0.0.1\" to \"10.0.2.2\" for android emulators. Use real IP on real devices.',\n          );\n        }\n      }\n    }\n\n    if (!isUndefined(settings.persistence) && !isBoolean(settings.persistence)) {\n      return Promise.reject(\n        new Error(\n          \"firebase.firestore().settings(*) 'settings.persistence' must be a boolean value.\",\n        ),\n      );\n    }\n\n    if (!isUndefined(settings.ssl) && !isBoolean(settings.ssl)) {\n      throw new Error(\"firebase.firestore().settings(*) 'settings.ssl' must be a boolean value.\");\n    }\n\n    if (\n      !isUndefined(settings.serverTimestampBehavior) &&\n      !['estimate', 'previous', 'none'].includes(settings.serverTimestampBehavior)\n    ) {\n      return Promise.reject(\n        new Error(\n          \"firebase.firestore().settings(*) 'settings.serverTimestampBehavior' must be one of 'estimate', 'previous', 'none'.\",\n        ),\n      );\n    }\n\n    if (!isUndefined(settings.ignoreUndefinedProperties)) {\n      if (!isBoolean(settings.ignoreUndefinedProperties)) {\n        return Promise.reject(\n          new Error(\n            \"firebase.firestore().settings(*) 'settings.ignoreUndefinedProperties' must be a boolean value.\",\n          ),\n        );\n      } else {\n        this._settings.ignoreUndefinedProperties = settings.ignoreUndefinedProperties;\n      }\n\n      delete settings.ignoreUndefinedProperties;\n    }\n\n    return this.native.settings(settings);\n  }\n}\n\n// import { SDK_VERSION } from '@react-native-firebase/firestore';\nexport const SDK_VERSION = version;\n\nexport * from './modular';\n\n// import firestore from '@react-native-firebase/firestore';\n// firestore().X(...);\nexport default createModuleNamespace({\n  statics: FirestoreStatics,\n  version,\n  namespace,\n  nativeModuleName,\n  nativeEvents,\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: false,\n  ModuleClass: FirebaseFirestoreModule,\n});\n\n// import firestore, { firebase } from '@react-native-firebase/firestore';\n// firestore().X(...);\n// firebase.firestore().X(...);\nexport const firebase = getFirebaseRoot();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}