{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar ThemeContext = createContext({});\nexport var ThemeProvider = function ThemeProvider(_ref) {\n  var children = _ref.children,\n    _ref$initialTheme = _ref.initialTheme,\n    initialTheme = _ref$initialTheme === void 0 ? 'light' : _ref$initialTheme;\n  var _useState = useState(initialTheme),\n    _useState2 = _slicedToArray(_useState, 2),\n    theme = _useState2[0],\n    setTheme = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  useEffect(function () {\n    var loadSavedTheme = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          var savedTheme = yield AsyncStorage.getItem('theme');\n          if (savedTheme) {\n            setTheme(savedTheme);\n          }\n        } catch (error) {\n          console.error('Erro ao carregar tema:', error);\n        } finally {\n          setLoading(false);\n        }\n      });\n      return function loadSavedTheme() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    loadSavedTheme();\n  }, []);\n  var toggleTheme = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      try {\n        var newTheme = theme === 'light' ? 'dark' : 'light';\n        yield AsyncStorage.setItem('theme', newTheme);\n        setTheme(newTheme);\n        return {\n          success: true\n        };\n      } catch (error) {\n        console.error('Erro ao alternar tema:', error);\n        return {\n          success: false,\n          error: error\n        };\n      }\n    });\n    return function toggleTheme() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var setThemeMode = function () {\n    var _ref4 = _asyncToGenerator(function* (mode) {\n      try {\n        if (mode !== 'light' && mode !== 'dark') {\n          throw new Error('Tema inválido. Use \"light\" ou \"dark\"');\n        }\n        yield AsyncStorage.setItem('theme', mode);\n        setTheme(mode);\n        return {\n          success: true\n        };\n      } catch (error) {\n        console.error('Erro ao definir tema:', error);\n        return {\n          success: false,\n          error: error\n        };\n      }\n    });\n    return function setThemeMode(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  return _jsx(ThemeContext.Provider, {\n    value: {\n      theme: theme,\n      isDarkMode: theme === 'dark',\n      loading: loading,\n      toggleTheme: toggleTheme,\n      setThemeMode: setThemeMode\n    },\n    children: children\n  });\n};\nexport var useTheme = function useTheme() {\n  return useContext(ThemeContext);\n};","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","AsyncStorage","jsx","_jsx","ThemeContext","ThemeProvider","_ref","children","_ref$initialTheme","initialTheme","_useState","_useState2","_slicedToArray","theme","setTheme","_useState3","_useState4","loading","setLoading","loadSavedTheme","_ref2","_asyncToGenerator","savedTheme","getItem","error","console","apply","arguments","toggleTheme","_ref3","newTheme","setItem","success","setThemeMode","_ref4","mode","Error","_x","Provider","value","isDarkMode","useTheme"],"sources":["C:/Users/rilto/Downloads/meusProjetos/smartList/src/app/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nconst ThemeContext = createContext({});\r\n\r\nexport const ThemeProvider = ({ children, initialTheme = 'light' }) => {\r\n  const [theme, setTheme] = useState(initialTheme);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Carregar tema salvo\r\n  useEffect(() => {\r\n    const loadSavedTheme = async () => {\r\n      try {\r\n        const savedTheme = await AsyncStorage.getItem('theme');\r\n        if (savedTheme) {\r\n          setTheme(savedTheme);\r\n        }\r\n      } catch (error) {\r\n        console.error('Erro ao carregar tema:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadSavedTheme();\r\n  }, []);\r\n\r\n  // Alternar entre temas claro e escuro\r\n  const toggleTheme = async () => {\r\n    try {\r\n      const newTheme = theme === 'light' ? 'dark' : 'light';\r\n      await AsyncStorage.setItem('theme', newTheme);\r\n      setTheme(newTheme);\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Erro ao alternar tema:', error);\r\n      return { success: false, error };\r\n    }\r\n  };\r\n\r\n  // Definir tema específico\r\n  const setThemeMode = async (mode) => {\r\n    try {\r\n      if (mode !== 'light' && mode !== 'dark') {\r\n        throw new Error('Tema inválido. Use \"light\" ou \"dark\"');\r\n      }\r\n      \r\n      await AsyncStorage.setItem('theme', mode);\r\n      setTheme(mode);\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Erro ao definir tema:', error);\r\n      return { success: false, error };\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider\r\n      value={{\r\n        theme,\r\n        isDarkMode: theme === 'dark',\r\n        loading,\r\n        toggleTheme,\r\n        setThemeMode,\r\n      }}\r\n    >\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTheme = () => useContext(ThemeContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}