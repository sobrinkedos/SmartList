{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { getFirestore, syncDataWithFirestore } from \"./firebase\";\nimport * as SQLite from 'expo-sqlite';\nimport { v4 as uuidv4 } from 'uuid';\nvar db = SQLite.openDatabase('smartlist.db');\nexport var StoreService = {\n  getAllStores: function getAllStores() {\n    return new Promise(function (resolve, reject) {\n      db.transaction(function (tx) {\n        tx.executeSql('SELECT * FROM stores WHERE is_deleted = 0 ORDER BY name ASC', [], function (_, _ref) {\n          var rows = _ref.rows;\n          var stores = rows._array.map(function (item) {\n            return _objectSpread(_objectSpread({}, item), {}, {\n              latitude: item.latitude ? parseFloat(item.latitude) : null,\n              longitude: item.longitude ? parseFloat(item.longitude) : null\n            });\n          });\n          resolve(stores);\n        }, function (_, error) {\n          console.error('Erro ao obter lojas:', error);\n          reject(error);\n          return false;\n        });\n      });\n    });\n  },\n  getStoreById: function getStoreById(id) {\n    return new Promise(function (resolve, reject) {\n      db.transaction(function (tx) {\n        tx.executeSql('SELECT * FROM stores WHERE id = ? AND is_deleted = 0', [id], function (_, _ref2) {\n          var rows = _ref2.rows;\n          if (rows.length > 0) {\n            var store = rows.item(0);\n            resolve(_objectSpread(_objectSpread({}, store), {}, {\n              latitude: store.latitude ? parseFloat(store.latitude) : null,\n              longitude: store.longitude ? parseFloat(store.longitude) : null\n            }));\n          } else {\n            resolve(null);\n          }\n        }, function (_, error) {\n          console.error('Erro ao obter loja:', error);\n          reject(error);\n          return false;\n        });\n      });\n    });\n  },\n  addStore: function addStore(store) {\n    return new Promise(function (resolve, reject) {\n      var now = Date.now();\n      var storeId = store.id || uuidv4();\n      var storeData = {\n        id: storeId,\n        name: store.name,\n        address: store.address || '',\n        latitude: store.latitude || null,\n        longitude: store.longitude || null,\n        created_at: now,\n        updated_at: now,\n        is_synced: 0,\n        is_deleted: 0,\n        user_id: store.userId || null\n      };\n      db.transaction(function (tx) {\n        tx.executeSql(`INSERT INTO stores (\n            id, name, address, latitude, longitude, created_at, updated_at, is_synced, is_deleted, user_id\n          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`, [storeData.id, storeData.name, storeData.address, storeData.latitude, storeData.longitude, storeData.created_at, storeData.updated_at, storeData.is_synced, storeData.is_deleted, storeData.user_id], function (_, result) {\n          resolve({\n            success: true,\n            store: _objectSpread(_objectSpread({}, store), {}, {\n              id: storeId,\n              created_at: now,\n              updated_at: now\n            })\n          });\n        }, function (_, error) {\n          console.error('Erro ao adicionar loja:', error);\n          reject({\n            success: false,\n            error: error.message || 'Erro ao adicionar loja'\n          });\n          return false;\n        });\n      });\n    });\n  },\n  updateStore: function updateStore(store) {\n    return new Promise(function (resolve, reject) {\n      if (!store.id) {\n        reject({\n          success: false,\n          error: 'ID da loja não fornecido'\n        });\n        return;\n      }\n      var now = Date.now();\n      var storeData = {\n        name: store.name,\n        address: store.address || '',\n        latitude: store.latitude || null,\n        longitude: store.longitude || null,\n        updated_at: now,\n        is_synced: 0\n      };\n      db.transaction(function (tx) {\n        tx.executeSql(`UPDATE stores SET \n            name = ?, address = ?, latitude = ?, longitude = ?, updated_at = ?, is_synced = ? \n          WHERE id = ?`, [storeData.name, storeData.address, storeData.latitude, storeData.longitude, storeData.updated_at, storeData.is_synced, store.id], function (_, result) {\n          if (result.rowsAffected > 0) {\n            resolve({\n              success: true,\n              store: _objectSpread(_objectSpread({}, store), {}, {\n                updated_at: now\n              })\n            });\n          } else {\n            reject({\n              success: false,\n              error: 'Loja não encontrada'\n            });\n          }\n        }, function (_, error) {\n          console.error('Erro ao atualizar loja:', error);\n          reject({\n            success: false,\n            error: error.message || 'Erro ao atualizar loja'\n          });\n          return false;\n        });\n      });\n    });\n  },\n  deleteStore: function deleteStore(id) {\n    return new Promise(function (resolve, reject) {\n      var now = Date.now();\n      db.transaction(function (tx) {\n        tx.executeSql('UPDATE stores SET is_deleted = 1, updated_at = ?, is_synced = 0 WHERE id = ?', [now, id], function (_, result) {\n          if (result.rowsAffected > 0) {\n            resolve({\n              success: true\n            });\n          } else {\n            reject({\n              success: false,\n              error: 'Loja não encontrada'\n            });\n          }\n        }, function (_, error) {\n          console.error('Erro ao excluir loja:', error);\n          reject({\n            success: false,\n            error: error.message || 'Erro ao excluir loja'\n          });\n          return false;\n        });\n      });\n    });\n  },\n  searchStores: function searchStores(query) {\n    return new Promise(function (resolve, reject) {\n      var searchTerm = `%${query}%`;\n      db.transaction(function (tx) {\n        tx.executeSql(`SELECT * FROM stores \n           WHERE (name LIKE ? OR address LIKE ?) \n           AND is_deleted = 0 \n           ORDER BY name ASC`, [searchTerm, searchTerm], function (_, _ref3) {\n          var rows = _ref3.rows;\n          var stores = rows._array.map(function (item) {\n            return _objectSpread(_objectSpread({}, item), {}, {\n              latitude: item.latitude ? parseFloat(item.latitude) : null,\n              longitude: item.longitude ? parseFloat(item.longitude) : null\n            });\n          });\n          resolve(stores);\n        }, function (_, error) {\n          console.error('Erro ao buscar lojas:', error);\n          reject(error);\n          return false;\n        });\n      });\n    });\n  },\n  syncWithFirestore: function () {\n    var _syncWithFirestore = _asyncToGenerator(function* () {\n      try {\n        var stores = yield new Promise(function (resolve, reject) {\n          db.transaction(function (tx) {\n            tx.executeSql('SELECT * FROM stores WHERE is_synced = 0', [], function (_, _ref4) {\n              var rows = _ref4.rows;\n              return resolve(rows._array);\n            }, function (_, error) {\n              console.error('Erro ao obter lojas para sincronização:', error);\n              reject(error);\n              return false;\n            });\n          });\n        });\n        if (stores.length === 0) {\n          return {\n            success: true,\n            message: 'Nenhuma loja para sincronizar'\n          };\n        }\n        var result = yield syncDataWithFirestore('stores', stores);\n        if (result.success) {\n          yield new Promise(function (resolve, reject) {\n            db.transaction(function (tx) {\n              stores.forEach(function (store) {\n                tx.executeSql('UPDATE stores SET is_synced = 1 WHERE id = ?', [store.id], null, function (_, error) {\n                  console.error('Erro ao atualizar status de sincronização:', error);\n                  return false;\n                });\n              });\n              resolve();\n            }, reject);\n          });\n          return {\n            success: true,\n            message: `${stores.length} lojas sincronizadas com sucesso`\n          };\n        } else {\n          throw new Error(result.error || 'Erro ao sincronizar com Firestore');\n        }\n      } catch (error) {\n        console.error('Erro na sincronização de lojas:', error);\n        return {\n          success: false,\n          error: error.message || 'Erro na sincronização de lojas'\n        };\n      }\n    });\n    function syncWithFirestore() {\n      return _syncWithFirestore.apply(this, arguments);\n    }\n    return syncWithFirestore;\n  }(),\n  findNearbyStores: function findNearbyStores(latitude, longitude) {\n    var radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;\n    return new Promise(function (resolve, reject) {\n      db.transaction(function (tx) {\n        tx.executeSql(`SELECT *, \n           (((latitude - ?) * (latitude - ?)) + ((longitude - ?) * (longitude - ?))) AS distance \n           FROM stores \n           WHERE latitude IS NOT NULL AND longitude IS NOT NULL AND is_deleted = 0 \n           ORDER BY distance ASC`, [latitude, latitude, longitude, longitude], function (_, _ref5) {\n          var rows = _ref5.rows;\n          var stores = rows._array.map(function (item) {\n            return _objectSpread(_objectSpread({}, item), {}, {\n              latitude: parseFloat(item.latitude),\n              longitude: parseFloat(item.longitude),\n              distance: Math.sqrt(item.distance) * 111.32\n            });\n          }).filter(function (store) {\n            return store.distance <= radius;\n          });\n          resolve(stores);\n        }, function (_, error) {\n          console.error('Erro ao buscar lojas próximas:', error);\n          reject(error);\n          return false;\n        });\n      });\n    });\n  }\n};","map":{"version":3,"names":["AsyncStorage","getFirestore","syncDataWithFirestore","SQLite","v4","uuidv4","db","openDatabase","StoreService","getAllStores","Promise","resolve","reject","transaction","tx","executeSql","_","_ref","rows","stores","_array","map","item","_objectSpread","latitude","parseFloat","longitude","error","console","getStoreById","id","_ref2","length","store","addStore","now","Date","storeId","storeData","name","address","created_at","updated_at","is_synced","is_deleted","user_id","userId","result","success","message","updateStore","rowsAffected","deleteStore","searchStores","query","searchTerm","_ref3","syncWithFirestore","_syncWithFirestore","_asyncToGenerator","_ref4","forEach","Error","apply","arguments","findNearbyStores","radius","undefined","_ref5","distance","Math","sqrt","filter"],"sources":["C:/Users/rilto/Downloads/meusProjetos/smartList/src/app/services/storeService.js"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { getFirestore, syncDataWithFirestore } from './firebase';\r\nimport * as SQLite from 'expo-sqlite';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// Abrir conexão com o banco de dados\r\nconst db = SQLite.openDatabase('smartlist.db');\r\n\r\n/**\r\n * Serviço para gerenciar lojas/mercados\r\n */\r\nexport const StoreService = {\r\n  /**\r\n   * Obter todas as lojas\r\n   */\r\n  getAllStores: () => {\r\n    return new Promise((resolve, reject) => {\r\n      db.transaction(tx => {\r\n        tx.executeSql(\r\n          'SELECT * FROM stores WHERE is_deleted = 0 ORDER BY name ASC',\r\n          [],\r\n          (_, { rows }) => {\r\n            const stores = rows._array.map(item => ({\r\n              ...item,\r\n              latitude: item.latitude ? parseFloat(item.latitude) : null,\r\n              longitude: item.longitude ? parseFloat(item.longitude) : null,\r\n            }));\r\n            resolve(stores);\r\n          },\r\n          (_, error) => {\r\n            console.error('Erro ao obter lojas:', error);\r\n            reject(error);\r\n            return false;\r\n          }\r\n        );\r\n      });\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Obter loja por ID\r\n   * @param {string} id - ID da loja\r\n   */\r\n  getStoreById: (id) => {\r\n    return new Promise((resolve, reject) => {\r\n      db.transaction(tx => {\r\n        tx.executeSql(\r\n          'SELECT * FROM stores WHERE id = ? AND is_deleted = 0',\r\n          [id],\r\n          (_, { rows }) => {\r\n            if (rows.length > 0) {\r\n              const store = rows.item(0);\r\n              resolve({\r\n                ...store,\r\n                latitude: store.latitude ? parseFloat(store.latitude) : null,\r\n                longitude: store.longitude ? parseFloat(store.longitude) : null,\r\n              });\r\n            } else {\r\n              resolve(null);\r\n            }\r\n          },\r\n          (_, error) => {\r\n            console.error('Erro ao obter loja:', error);\r\n            reject(error);\r\n            return false;\r\n          }\r\n        );\r\n      });\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Adicionar nova loja\r\n   * @param {Object} store - Dados da loja\r\n   */\r\n  addStore: (store) => {\r\n    return new Promise((resolve, reject) => {\r\n      const now = Date.now();\r\n      const storeId = store.id || uuidv4();\r\n      \r\n      const storeData = {\r\n        id: storeId,\r\n        name: store.name,\r\n        address: store.address || '',\r\n        latitude: store.latitude || null,\r\n        longitude: store.longitude || null,\r\n        created_at: now,\r\n        updated_at: now,\r\n        is_synced: 0,\r\n        is_deleted: 0,\r\n        user_id: store.userId || null,\r\n      };\r\n\r\n      db.transaction(tx => {\r\n        tx.executeSql(\r\n          `INSERT INTO stores (\r\n            id, name, address, latitude, longitude, created_at, updated_at, is_synced, is_deleted, user_id\r\n          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,\r\n          [\r\n            storeData.id, storeData.name, storeData.address, storeData.latitude, storeData.longitude,\r\n            storeData.created_at, storeData.updated_at, storeData.is_synced, storeData.is_deleted, storeData.user_id\r\n          ],\r\n          (_, result) => {\r\n            resolve({\r\n              success: true,\r\n              store: {\r\n                ...store,\r\n                id: storeId,\r\n                created_at: now,\r\n                updated_at: now,\r\n              }\r\n            });\r\n          },\r\n          (_, error) => {\r\n            console.error('Erro ao adicionar loja:', error);\r\n            reject({\r\n              success: false,\r\n              error: error.message || 'Erro ao adicionar loja'\r\n            });\r\n            return false;\r\n          }\r\n        );\r\n      });\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Atualizar loja existente\r\n   * @param {Object} store - Dados da loja\r\n   */\r\n  updateStore: (store) => {\r\n    return new Promise((resolve, reject) => {\r\n      if (!store.id) {\r\n        reject({\r\n          success: false,\r\n          error: 'ID da loja não fornecido'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const now = Date.now();\r\n      \r\n      const storeData = {\r\n        name: store.name,\r\n        address: store.address || '',\r\n        latitude: store.latitude || null,\r\n        longitude: store.longitude || null,\r\n        updated_at: now,\r\n        is_synced: 0,\r\n      };\r\n\r\n      db.transaction(tx => {\r\n        tx.executeSql(\r\n          `UPDATE stores SET \r\n            name = ?, address = ?, latitude = ?, longitude = ?, updated_at = ?, is_synced = ? \r\n          WHERE id = ?`,\r\n          [\r\n            storeData.name, storeData.address, storeData.latitude, storeData.longitude,\r\n            storeData.updated_at, storeData.is_synced, store.id\r\n          ],\r\n          (_, result) => {\r\n            if (result.rowsAffected > 0) {\r\n              resolve({\r\n                success: true,\r\n                store: {\r\n                  ...store,\r\n                  updated_at: now,\r\n                }\r\n              });\r\n            } else {\r\n              reject({\r\n                success: false,\r\n                error: 'Loja não encontrada'\r\n              });\r\n            }\r\n          },\r\n          (_, error) => {\r\n            console.error('Erro ao atualizar loja:', error);\r\n            reject({\r\n              success: false,\r\n              error: error.message || 'Erro ao atualizar loja'\r\n            });\r\n            return false;\r\n          }\r\n        );\r\n      });\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Excluir loja\r\n   * @param {string} id - ID da loja\r\n   */\r\n  deleteStore: (id) => {\r\n    return new Promise((resolve, reject) => {\r\n      const now = Date.now();\r\n\r\n      db.transaction(tx => {\r\n        tx.executeSql(\r\n          'UPDATE stores SET is_deleted = 1, updated_at = ?, is_synced = 0 WHERE id = ?',\r\n          [now, id],\r\n          (_, result) => {\r\n            if (result.rowsAffected > 0) {\r\n              resolve({ success: true });\r\n            } else {\r\n              reject({\r\n                success: false,\r\n                error: 'Loja não encontrada'\r\n              });\r\n            }\r\n          },\r\n          (_, error) => {\r\n            console.error('Erro ao excluir loja:', error);\r\n            reject({\r\n              success: false,\r\n              error: error.message || 'Erro ao excluir loja'\r\n            });\r\n            return false;\r\n          }\r\n        );\r\n      });\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Buscar lojas por texto\r\n   * @param {string} query - Texto para busca\r\n   */\r\n  searchStores: (query) => {\r\n    return new Promise((resolve, reject) => {\r\n      const searchTerm = `%${query}%`;\r\n      \r\n      db.transaction(tx => {\r\n        tx.executeSql(\r\n          `SELECT * FROM stores \r\n           WHERE (name LIKE ? OR address LIKE ?) \r\n           AND is_deleted = 0 \r\n           ORDER BY name ASC`,\r\n          [searchTerm, searchTerm],\r\n          (_, { rows }) => {\r\n            const stores = rows._array.map(item => ({\r\n              ...item,\r\n              latitude: item.latitude ? parseFloat(item.latitude) : null,\r\n              longitude: item.longitude ? parseFloat(item.longitude) : null,\r\n            }));\r\n            resolve(stores);\r\n          },\r\n          (_, error) => {\r\n            console.error('Erro ao buscar lojas:', error);\r\n            reject(error);\r\n            return false;\r\n          }\r\n        );\r\n      });\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Sincronizar lojas com o Firestore\r\n   */\r\n  syncWithFirestore: async () => {\r\n    try {\r\n      // Obter lojas não sincronizadas\r\n      const stores = await new Promise((resolve, reject) => {\r\n        db.transaction(tx => {\r\n          tx.executeSql(\r\n            'SELECT * FROM stores WHERE is_synced = 0',\r\n            [],\r\n            (_, { rows }) => resolve(rows._array),\r\n            (_, error) => {\r\n              console.error('Erro ao obter lojas para sincronização:', error);\r\n              reject(error);\r\n              return false;\r\n            }\r\n          );\r\n        });\r\n      });\r\n\r\n      if (stores.length === 0) {\r\n        return { success: true, message: 'Nenhuma loja para sincronizar' };\r\n      }\r\n\r\n      // Sincronizar com o Firestore\r\n      const result = await syncDataWithFirestore('stores', stores);\r\n\r\n      if (result.success) {\r\n        // Atualizar status de sincronização no banco local\r\n        await new Promise((resolve, reject) => {\r\n          db.transaction(tx => {\r\n            stores.forEach(store => {\r\n              tx.executeSql(\r\n                'UPDATE stores SET is_synced = 1 WHERE id = ?',\r\n                [store.id],\r\n                null,\r\n                (_, error) => {\r\n                  console.error('Erro ao atualizar status de sincronização:', error);\r\n                  return false;\r\n                }\r\n              );\r\n            });\r\n            resolve();\r\n          }, reject);\r\n        });\r\n\r\n        return { \r\n          success: true, \r\n          message: `${stores.length} lojas sincronizadas com sucesso` \r\n        };\r\n      } else {\r\n        throw new Error(result.error || 'Erro ao sincronizar com Firestore');\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro na sincronização de lojas:', error);\r\n      return { \r\n        success: false, \r\n        error: error.message || 'Erro na sincronização de lojas' \r\n      };\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Buscar lojas próximas por coordenadas\r\n   * @param {number} latitude - Latitude da posição atual\r\n   * @param {number} longitude - Longitude da posição atual\r\n   * @param {number} radius - Raio de busca em km (opcional, padrão 5km)\r\n   */\r\n  findNearbyStores: (latitude, longitude, radius = 5) => {\r\n    return new Promise((resolve, reject) => {\r\n      // Implementação simplificada - em uma aplicação real, seria necessário\r\n      // um cálculo mais preciso de distância usando a fórmula de Haversine\r\n      db.transaction(tx => {\r\n        tx.executeSql(\r\n          `SELECT *, \r\n           (((latitude - ?) * (latitude - ?)) + ((longitude - ?) * (longitude - ?))) AS distance \r\n           FROM stores \r\n           WHERE latitude IS NOT NULL AND longitude IS NOT NULL AND is_deleted = 0 \r\n           ORDER BY distance ASC`,\r\n          [latitude, latitude, longitude, longitude],\r\n          (_, { rows }) => {\r\n            const stores = rows._array\r\n              .map(item => ({\r\n                ...item,\r\n                latitude: parseFloat(item.latitude),\r\n                longitude: parseFloat(item.longitude),\r\n                distance: Math.sqrt(item.distance) * 111.32, // Conversão aproximada para km\r\n              }))\r\n              .filter(store => store.distance <= radius);\r\n            resolve(stores);\r\n          },\r\n          (_, error) => {\r\n            console.error('Erro ao buscar lojas próximas:', error);\r\n            reject(error);\r\n            return false;\r\n          }\r\n        );\r\n      });\r\n    });\r\n  }\r\n};"],"mappings":";;;;AAAA,OAAOA,YAAY,MAAM,2CAA2C;AACpE,SAASC,YAAY,EAAEC,qBAAqB;AAC5C,OAAO,KAAKC,MAAM,MAAM,aAAa;AACrC,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AAGnC,IAAMC,EAAE,GAAGH,MAAM,CAACI,YAAY,CAAC,cAAc,CAAC;AAK9C,OAAO,IAAMC,YAAY,GAAG;EAI1BC,YAAY,EAAE,SAAdA,YAAYA,CAAA,EAAQ;IAClB,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;MACtCN,EAAE,CAACO,WAAW,CAAC,UAAAC,EAAE,EAAI;QACnBA,EAAE,CAACC,UAAU,CACX,6DAA6D,EAC7D,EAAE,EACF,UAACC,CAAC,EAAAC,IAAA,EAAe;UAAA,IAAXC,IAAI,GAAAD,IAAA,CAAJC,IAAI;UACR,IAAMC,MAAM,GAAGD,IAAI,CAACE,MAAM,CAACC,GAAG,CAAC,UAAAC,IAAI;YAAA,OAAAC,aAAA,CAAAA,aAAA,KAC9BD,IAAI;cACPE,QAAQ,EAAEF,IAAI,CAACE,QAAQ,GAAGC,UAAU,CAACH,IAAI,CAACE,QAAQ,CAAC,GAAG,IAAI;cAC1DE,SAAS,EAAEJ,IAAI,CAACI,SAAS,GAAGD,UAAU,CAACH,IAAI,CAACI,SAAS,CAAC,GAAG;YAAI;UAAA,CAC7D,CAAC;UACHf,OAAO,CAACQ,MAAM,CAAC;QACjB,CAAC,EACD,UAACH,CAAC,EAAEW,KAAK,EAAK;UACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;UAC5Cf,MAAM,CAACe,KAAK,CAAC;UACb,OAAO,KAAK;QACd,CACF,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAMDE,YAAY,EAAE,SAAdA,YAAYA,CAAGC,EAAE,EAAK;IACpB,OAAO,IAAIpB,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;MACtCN,EAAE,CAACO,WAAW,CAAC,UAAAC,EAAE,EAAI;QACnBA,EAAE,CAACC,UAAU,CACX,sDAAsD,EACtD,CAACe,EAAE,CAAC,EACJ,UAACd,CAAC,EAAAe,KAAA,EAAe;UAAA,IAAXb,IAAI,GAAAa,KAAA,CAAJb,IAAI;UACR,IAAIA,IAAI,CAACc,MAAM,GAAG,CAAC,EAAE;YACnB,IAAMC,KAAK,GAAGf,IAAI,CAACI,IAAI,CAAC,CAAC,CAAC;YAC1BX,OAAO,CAAAY,aAAA,CAAAA,aAAA,KACFU,KAAK;cACRT,QAAQ,EAAES,KAAK,CAACT,QAAQ,GAAGC,UAAU,CAACQ,KAAK,CAACT,QAAQ,CAAC,GAAG,IAAI;cAC5DE,SAAS,EAAEO,KAAK,CAACP,SAAS,GAAGD,UAAU,CAACQ,KAAK,CAACP,SAAS,CAAC,GAAG;YAAI,EAChE,CAAC;UACJ,CAAC,MAAM;YACLf,OAAO,CAAC,IAAI,CAAC;UACf;QACF,CAAC,EACD,UAACK,CAAC,EAAEW,KAAK,EAAK;UACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;UAC3Cf,MAAM,CAACe,KAAK,CAAC;UACb,OAAO,KAAK;QACd,CACF,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAMDO,QAAQ,EAAE,SAAVA,QAAQA,CAAGD,KAAK,EAAK;IACnB,OAAO,IAAIvB,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;MACtC,IAAMuB,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;MACtB,IAAME,OAAO,GAAGJ,KAAK,CAACH,EAAE,IAAIzB,MAAM,CAAC,CAAC;MAEpC,IAAMiC,SAAS,GAAG;QAChBR,EAAE,EAAEO,OAAO;QACXE,IAAI,EAAEN,KAAK,CAACM,IAAI;QAChBC,OAAO,EAAEP,KAAK,CAACO,OAAO,IAAI,EAAE;QAC5BhB,QAAQ,EAAES,KAAK,CAACT,QAAQ,IAAI,IAAI;QAChCE,SAAS,EAAEO,KAAK,CAACP,SAAS,IAAI,IAAI;QAClCe,UAAU,EAAEN,GAAG;QACfO,UAAU,EAAEP,GAAG;QACfQ,SAAS,EAAE,CAAC;QACZC,UAAU,EAAE,CAAC;QACbC,OAAO,EAAEZ,KAAK,CAACa,MAAM,IAAI;MAC3B,CAAC;MAEDxC,EAAE,CAACO,WAAW,CAAC,UAAAC,EAAE,EAAI;QACnBA,EAAE,CAACC,UAAU,CACX;AACV;AACA,kDAAkD,EACxC,CACEuB,SAAS,CAACR,EAAE,EAAEQ,SAAS,CAACC,IAAI,EAAED,SAAS,CAACE,OAAO,EAAEF,SAAS,CAACd,QAAQ,EAAEc,SAAS,CAACZ,SAAS,EACxFY,SAAS,CAACG,UAAU,EAAEH,SAAS,CAACI,UAAU,EAAEJ,SAAS,CAACK,SAAS,EAAEL,SAAS,CAACM,UAAU,EAAEN,SAAS,CAACO,OAAO,CACzG,EACD,UAAC7B,CAAC,EAAE+B,MAAM,EAAK;UACbpC,OAAO,CAAC;YACNqC,OAAO,EAAE,IAAI;YACbf,KAAK,EAAAV,aAAA,CAAAA,aAAA,KACAU,KAAK;cACRH,EAAE,EAAEO,OAAO;cACXI,UAAU,EAAEN,GAAG;cACfO,UAAU,EAAEP;YAAG;UAEnB,CAAC,CAAC;QACJ,CAAC,EACD,UAACnB,CAAC,EAAEW,KAAK,EAAK;UACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;UAC/Cf,MAAM,CAAC;YACLoC,OAAO,EAAE,KAAK;YACdrB,KAAK,EAAEA,KAAK,CAACsB,OAAO,IAAI;UAC1B,CAAC,CAAC;UACF,OAAO,KAAK;QACd,CACF,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAMDC,WAAW,EAAE,SAAbA,WAAWA,CAAGjB,KAAK,EAAK;IACtB,OAAO,IAAIvB,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;MACtC,IAAI,CAACqB,KAAK,CAACH,EAAE,EAAE;QACblB,MAAM,CAAC;UACLoC,OAAO,EAAE,KAAK;UACdrB,KAAK,EAAE;QACT,CAAC,CAAC;QACF;MACF;MAEA,IAAMQ,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;MAEtB,IAAMG,SAAS,GAAG;QAChBC,IAAI,EAAEN,KAAK,CAACM,IAAI;QAChBC,OAAO,EAAEP,KAAK,CAACO,OAAO,IAAI,EAAE;QAC5BhB,QAAQ,EAAES,KAAK,CAACT,QAAQ,IAAI,IAAI;QAChCE,SAAS,EAAEO,KAAK,CAACP,SAAS,IAAI,IAAI;QAClCgB,UAAU,EAAEP,GAAG;QACfQ,SAAS,EAAE;MACb,CAAC;MAEDrC,EAAE,CAACO,WAAW,CAAC,UAAAC,EAAE,EAAI;QACnBA,EAAE,CAACC,UAAU,CACX;AACV;AACA,uBAAuB,EACb,CACEuB,SAAS,CAACC,IAAI,EAAED,SAAS,CAACE,OAAO,EAAEF,SAAS,CAACd,QAAQ,EAAEc,SAAS,CAACZ,SAAS,EAC1EY,SAAS,CAACI,UAAU,EAAEJ,SAAS,CAACK,SAAS,EAAEV,KAAK,CAACH,EAAE,CACpD,EACD,UAACd,CAAC,EAAE+B,MAAM,EAAK;UACb,IAAIA,MAAM,CAACI,YAAY,GAAG,CAAC,EAAE;YAC3BxC,OAAO,CAAC;cACNqC,OAAO,EAAE,IAAI;cACbf,KAAK,EAAAV,aAAA,CAAAA,aAAA,KACAU,KAAK;gBACRS,UAAU,EAAEP;cAAG;YAEnB,CAAC,CAAC;UACJ,CAAC,MAAM;YACLvB,MAAM,CAAC;cACLoC,OAAO,EAAE,KAAK;cACdrB,KAAK,EAAE;YACT,CAAC,CAAC;UACJ;QACF,CAAC,EACD,UAACX,CAAC,EAAEW,KAAK,EAAK;UACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;UAC/Cf,MAAM,CAAC;YACLoC,OAAO,EAAE,KAAK;YACdrB,KAAK,EAAEA,KAAK,CAACsB,OAAO,IAAI;UAC1B,CAAC,CAAC;UACF,OAAO,KAAK;QACd,CACF,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAMDG,WAAW,EAAE,SAAbA,WAAWA,CAAGtB,EAAE,EAAK;IACnB,OAAO,IAAIpB,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;MACtC,IAAMuB,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;MAEtB7B,EAAE,CAACO,WAAW,CAAC,UAAAC,EAAE,EAAI;QACnBA,EAAE,CAACC,UAAU,CACX,8EAA8E,EAC9E,CAACoB,GAAG,EAAEL,EAAE,CAAC,EACT,UAACd,CAAC,EAAE+B,MAAM,EAAK;UACb,IAAIA,MAAM,CAACI,YAAY,GAAG,CAAC,EAAE;YAC3BxC,OAAO,CAAC;cAAEqC,OAAO,EAAE;YAAK,CAAC,CAAC;UAC5B,CAAC,MAAM;YACLpC,MAAM,CAAC;cACLoC,OAAO,EAAE,KAAK;cACdrB,KAAK,EAAE;YACT,CAAC,CAAC;UACJ;QACF,CAAC,EACD,UAACX,CAAC,EAAEW,KAAK,EAAK;UACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;UAC7Cf,MAAM,CAAC;YACLoC,OAAO,EAAE,KAAK;YACdrB,KAAK,EAAEA,KAAK,CAACsB,OAAO,IAAI;UAC1B,CAAC,CAAC;UACF,OAAO,KAAK;QACd,CACF,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAMDI,YAAY,EAAE,SAAdA,YAAYA,CAAGC,KAAK,EAAK;IACvB,OAAO,IAAI5C,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;MACtC,IAAM2C,UAAU,GAAG,IAAID,KAAK,GAAG;MAE/BhD,EAAE,CAACO,WAAW,CAAC,UAAAC,EAAE,EAAI;QACnBA,EAAE,CAACC,UAAU,CACX;AACV;AACA;AACA,6BAA6B,EACnB,CAACwC,UAAU,EAAEA,UAAU,CAAC,EACxB,UAACvC,CAAC,EAAAwC,KAAA,EAAe;UAAA,IAAXtC,IAAI,GAAAsC,KAAA,CAAJtC,IAAI;UACR,IAAMC,MAAM,GAAGD,IAAI,CAACE,MAAM,CAACC,GAAG,CAAC,UAAAC,IAAI;YAAA,OAAAC,aAAA,CAAAA,aAAA,KAC9BD,IAAI;cACPE,QAAQ,EAAEF,IAAI,CAACE,QAAQ,GAAGC,UAAU,CAACH,IAAI,CAACE,QAAQ,CAAC,GAAG,IAAI;cAC1DE,SAAS,EAAEJ,IAAI,CAACI,SAAS,GAAGD,UAAU,CAACH,IAAI,CAACI,SAAS,CAAC,GAAG;YAAI;UAAA,CAC7D,CAAC;UACHf,OAAO,CAACQ,MAAM,CAAC;QACjB,CAAC,EACD,UAACH,CAAC,EAAEW,KAAK,EAAK;UACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;UAC7Cf,MAAM,CAACe,KAAK,CAAC;UACb,OAAO,KAAK;QACd,CACF,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAKD8B,iBAAiB;IAAA,IAAAC,kBAAA,GAAAC,iBAAA,CAAE,aAAY;MAC7B,IAAI;QAEF,IAAMxC,MAAM,SAAS,IAAIT,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;UACpDN,EAAE,CAACO,WAAW,CAAC,UAAAC,EAAE,EAAI;YACnBA,EAAE,CAACC,UAAU,CACX,0CAA0C,EAC1C,EAAE,EACF,UAACC,CAAC,EAAA4C,KAAA;cAAA,IAAI1C,IAAI,GAAA0C,KAAA,CAAJ1C,IAAI;cAAA,OAAOP,OAAO,CAACO,IAAI,CAACE,MAAM,CAAC;YAAA,GACrC,UAACJ,CAAC,EAAEW,KAAK,EAAK;cACZC,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;cAC/Df,MAAM,CAACe,KAAK,CAAC;cACb,OAAO,KAAK;YACd,CACF,CAAC;UACH,CAAC,CAAC;QACJ,CAAC,CAAC;QAEF,IAAIR,MAAM,CAACa,MAAM,KAAK,CAAC,EAAE;UACvB,OAAO;YAAEgB,OAAO,EAAE,IAAI;YAAEC,OAAO,EAAE;UAAgC,CAAC;QACpE;QAGA,IAAMF,MAAM,SAAS7C,qBAAqB,CAAC,QAAQ,EAAEiB,MAAM,CAAC;QAE5D,IAAI4B,MAAM,CAACC,OAAO,EAAE;UAElB,MAAM,IAAItC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;YACrCN,EAAE,CAACO,WAAW,CAAC,UAAAC,EAAE,EAAI;cACnBK,MAAM,CAAC0C,OAAO,CAAC,UAAA5B,KAAK,EAAI;gBACtBnB,EAAE,CAACC,UAAU,CACX,8CAA8C,EAC9C,CAACkB,KAAK,CAACH,EAAE,CAAC,EACV,IAAI,EACJ,UAACd,CAAC,EAAEW,KAAK,EAAK;kBACZC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;kBAClE,OAAO,KAAK;gBACd,CACF,CAAC;cACH,CAAC,CAAC;cACFhB,OAAO,CAAC,CAAC;YACX,CAAC,EAAEC,MAAM,CAAC;UACZ,CAAC,CAAC;UAEF,OAAO;YACLoC,OAAO,EAAE,IAAI;YACbC,OAAO,EAAE,GAAG9B,MAAM,CAACa,MAAM;UAC3B,CAAC;QACH,CAAC,MAAM;UACL,MAAM,IAAI8B,KAAK,CAACf,MAAM,CAACpB,KAAK,IAAI,mCAAmC,CAAC;QACtE;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;QACvD,OAAO;UACLqB,OAAO,EAAE,KAAK;UACdrB,KAAK,EAAEA,KAAK,CAACsB,OAAO,IAAI;QAC1B,CAAC;MACH;IACF,CAAC;IAAA,SA1DDQ,iBAAiBA,CAAA;MAAA,OAAAC,kBAAA,CAAAK,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAjBP,iBAAiB;EAAA,GA0DhB;EAQDQ,gBAAgB,EAAE,SAAlBA,gBAAgBA,CAAGzC,QAAQ,EAAEE,SAAS,EAAiB;IAAA,IAAfwC,MAAM,GAAAF,SAAA,CAAAhC,MAAA,QAAAgC,SAAA,QAAAG,SAAA,GAAAH,SAAA,MAAG,CAAC;IAChD,OAAO,IAAItD,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;MAGtCN,EAAE,CAACO,WAAW,CAAC,UAAAC,EAAE,EAAI;QACnBA,EAAE,CAACC,UAAU,CACX;AACV;AACA;AACA;AACA,iCAAiC,EACvB,CAACS,QAAQ,EAAEA,QAAQ,EAAEE,SAAS,EAAEA,SAAS,CAAC,EAC1C,UAACV,CAAC,EAAAoD,KAAA,EAAe;UAAA,IAAXlD,IAAI,GAAAkD,KAAA,CAAJlD,IAAI;UACR,IAAMC,MAAM,GAAGD,IAAI,CAACE,MAAM,CACvBC,GAAG,CAAC,UAAAC,IAAI;YAAA,OAAAC,aAAA,CAAAA,aAAA,KACJD,IAAI;cACPE,QAAQ,EAAEC,UAAU,CAACH,IAAI,CAACE,QAAQ,CAAC;cACnCE,SAAS,EAAED,UAAU,CAACH,IAAI,CAACI,SAAS,CAAC;cACrC2C,QAAQ,EAAEC,IAAI,CAACC,IAAI,CAACjD,IAAI,CAAC+C,QAAQ,CAAC,GAAG;YAAM;UAAA,CAC3C,CAAC,CACFG,MAAM,CAAC,UAAAvC,KAAK;YAAA,OAAIA,KAAK,CAACoC,QAAQ,IAAIH,MAAM;UAAA,EAAC;UAC5CvD,OAAO,CAACQ,MAAM,CAAC;QACjB,CAAC,EACD,UAACH,CAAC,EAAEW,KAAK,EAAK;UACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;UACtDf,MAAM,CAACe,KAAK,CAAC;UACb,OAAO,KAAK;QACd,CACF,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}