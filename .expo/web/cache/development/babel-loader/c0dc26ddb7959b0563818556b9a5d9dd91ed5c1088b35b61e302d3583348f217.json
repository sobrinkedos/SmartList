{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { SyncService } from \"../services/syncService\";\nimport { useAuth } from \"./AuthContext\";\nimport NetInfo from '@react-native-community/netinfo';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar SyncContext = createContext({});\nexport var SyncProvider = function SyncProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState('synced'),\n    _useState2 = _slicedToArray(_useState, 2),\n    syncStatus = _useState2[0],\n    setSyncStatus = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    lastSyncTime = _useState4[0],\n    setLastSyncTime = _useState4[1];\n  var _useState5 = useState(true),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isOnline = _useState6[0],\n    setIsOnline = _useState6[1];\n  var _useAuth = useAuth(),\n    user = _useAuth.user,\n    isAuthenticated = _useAuth.isAuthenticated;\n  useEffect(function () {\n    var unsubscribe = NetInfo.addEventListener(function (state) {\n      setIsOnline(state.isConnected);\n      if (state.isConnected && syncStatus === 'offline' && isAuthenticated) {\n        syncData();\n      }\n    });\n    return function () {\n      return unsubscribe();\n    };\n  }, [syncStatus, isAuthenticated]);\n  useEffect(function () {\n    if (isAuthenticated && user && isOnline) {\n      syncData();\n    }\n  }, [isAuthenticated, user]);\n  useEffect(function () {\n    var syncInterval;\n    if (isAuthenticated && user && isOnline) {\n      syncInterval = setInterval(function () {\n        syncData();\n      }, 15 * 60 * 1000);\n    }\n    return function () {\n      if (syncInterval) {\n        clearInterval(syncInterval);\n      }\n    };\n  }, [isAuthenticated, user, isOnline]);\n  var syncData = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      if (!isAuthenticated || !user || !isOnline) {\n        setSyncStatus('offline');\n        return {\n          success: false,\n          error: 'Não é possível sincronizar'\n        };\n      }\n      try {\n        setSyncStatus('syncing');\n        var result = yield SyncService.syncAllData(user.uid);\n        if (result.success) {\n          setSyncStatus('synced');\n          setLastSyncTime(new Date());\n        } else {\n          setSyncStatus('offline');\n        }\n        return result;\n      } catch (error) {\n        console.error('Erro ao sincronizar dados:', error);\n        setSyncStatus('offline');\n        return {\n          success: false,\n          error: error\n        };\n      }\n    });\n    return function syncData() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var checkConnection = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      try {\n        var netInfo = yield NetInfo.fetch();\n        setIsOnline(netInfo.isConnected);\n        return {\n          connected: netInfo.isConnected\n        };\n      } catch (error) {\n        console.error('Erro ao verificar conexão:', error);\n        return {\n          connected: false,\n          error: error\n        };\n      }\n    });\n    return function checkConnection() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return _jsx(SyncContext.Provider, {\n    value: {\n      syncStatus: syncStatus,\n      lastSyncTime: lastSyncTime,\n      isOnline: isOnline,\n      syncData: syncData,\n      checkConnection: checkConnection\n    },\n    children: children\n  });\n};\nexport var useSync = function useSync() {\n  return useContext(SyncContext);\n};","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","SyncService","useAuth","NetInfo","jsx","_jsx","SyncContext","SyncProvider","_ref","children","_useState","_useState2","_slicedToArray","syncStatus","setSyncStatus","_useState3","_useState4","lastSyncTime","setLastSyncTime","_useState5","_useState6","isOnline","setIsOnline","_useAuth","user","isAuthenticated","unsubscribe","addEventListener","state","isConnected","syncData","syncInterval","setInterval","clearInterval","_ref2","_asyncToGenerator","success","error","result","syncAllData","uid","Date","console","apply","arguments","checkConnection","_ref3","netInfo","fetch","connected","Provider","value","useSync"],"sources":["C:/Users/rilto/Downloads/meusProjetos/smartList/src/app/contexts/SyncContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { SyncService } from '../services/syncService';\r\nimport { useAuth } from './AuthContext';\r\nimport NetInfo from '@react-native-community/netinfo';\r\n\r\nconst SyncContext = createContext({});\r\n\r\nexport const SyncProvider = ({ children }) => {\r\n  const [syncStatus, setSyncStatus] = useState('synced'); // 'synced', 'syncing', 'offline'\r\n  const [lastSyncTime, setLastSyncTime] = useState(null);\r\n  const [isOnline, setIsOnline] = useState(true);\r\n  const { user, isAuthenticated } = useAuth();\r\n\r\n  // Monitorar status da conexão\r\n  useEffect(() => {\r\n    const unsubscribe = NetInfo.addEventListener(state => {\r\n      setIsOnline(state.isConnected);\r\n      \r\n      // Se voltou a ficar online, tentar sincronizar\r\n      if (state.isConnected && syncStatus === 'offline' && isAuthenticated) {\r\n        syncData();\r\n      }\r\n    });\r\n    \r\n    return () => unsubscribe();\r\n  }, [syncStatus, isAuthenticated]);\r\n\r\n  // Sincronizar dados quando o usuário fizer login\r\n  useEffect(() => {\r\n    if (isAuthenticated && user && isOnline) {\r\n      syncData();\r\n    }\r\n  }, [isAuthenticated, user]);\r\n\r\n  // Sincronizar dados periodicamente quando estiver online\r\n  useEffect(() => {\r\n    let syncInterval;\r\n    \r\n    if (isAuthenticated && user && isOnline) {\r\n      // Sincronizar a cada 15 minutos\r\n      syncInterval = setInterval(() => {\r\n        syncData();\r\n      }, 15 * 60 * 1000);\r\n    }\r\n    \r\n    return () => {\r\n      if (syncInterval) {\r\n        clearInterval(syncInterval);\r\n      }\r\n    };\r\n  }, [isAuthenticated, user, isOnline]);\r\n\r\n  // Função para sincronizar dados\r\n  const syncData = async () => {\r\n    if (!isAuthenticated || !user || !isOnline) {\r\n      setSyncStatus('offline');\r\n      return { success: false, error: 'Não é possível sincronizar' };\r\n    }\r\n    \r\n    try {\r\n      setSyncStatus('syncing');\r\n      \r\n      const result = await SyncService.syncAllData(user.uid);\r\n      \r\n      if (result.success) {\r\n        setSyncStatus('synced');\r\n        setLastSyncTime(new Date());\r\n      } else {\r\n        setSyncStatus('offline');\r\n      }\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      console.error('Erro ao sincronizar dados:', error);\r\n      setSyncStatus('offline');\r\n      return { success: false, error };\r\n    }\r\n  };\r\n\r\n  // Verificar status da conexão\r\n  const checkConnection = async () => {\r\n    try {\r\n      const netInfo = await NetInfo.fetch();\r\n      setIsOnline(netInfo.isConnected);\r\n      return { connected: netInfo.isConnected };\r\n    } catch (error) {\r\n      console.error('Erro ao verificar conexão:', error);\r\n      return { connected: false, error };\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SyncContext.Provider\r\n      value={{\r\n        syncStatus,\r\n        lastSyncTime,\r\n        isOnline,\r\n        syncData,\r\n        checkConnection\r\n      }}\r\n    >\r\n      {children}\r\n    </SyncContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useSync = () => useContext(SyncContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}